//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class BluesnapTransactionPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private transactionDate: Date;
	public get TransactionDate() {
		return this.transactionDate;
	}
	public set TransactionDate(newValue: Date) {
		if (this.transactionDate != newValue) {
			this.transactionDate = newValue;
			this.MarkAsDirty('TransactionDate');
		}
	}

	private documentId: string;
	public get DocumentId() {
		return this.documentId;
	}
	public set DocumentId(newValue: string) {
		if (this.documentId != newValue) {
			this.documentId = newValue;
			this.MarkAsDirty('DocumentId');
		}
	}

	private logitudeAmital: string;
	public get LogitudeAmital() {
		return this.logitudeAmital;
	}
	public set LogitudeAmital(newValue: string) {
		if (this.logitudeAmital != newValue) {
			this.logitudeAmital = newValue;
			this.MarkAsDirty('LogitudeAmital');
		}
	}

	private invoiceAmountInUSD: number;
	public get InvoiceAmountInUSD() {
		return this.invoiceAmountInUSD;
	}
	public set InvoiceAmountInUSD(newValue: number) {
		if (this.invoiceAmountInUSD != newValue) {
			this.invoiceAmountInUSD = newValue;
			this.MarkAsDirty('InvoiceAmountInUSD');
		}
	}

	private taxAmountInUSD: number;
	public get TaxAmountInUSD() {
		return this.taxAmountInUSD;
	}
	public set TaxAmountInUSD(newValue: number) {
		if (this.taxAmountInUSD != newValue) {
			this.taxAmountInUSD = newValue;
			this.MarkAsDirty('TaxAmountInUSD');
		}
	}

	private contractNumber: string;
	public get ContractNumber() {
		return this.contractNumber;
	}
	public set ContractNumber(newValue: string) {
		if (this.contractNumber != newValue) {
			this.contractNumber = newValue;
			this.MarkAsDirty('ContractNumber');
		}
	}

	public OldEntityPM: BluesnapTransactionPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'BluesnapTransaction');
			}
		}
	}
	private MyClone: BluesnapTransactionPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
