//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//
import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class TaskSchedulerHistoryPM {
	//
	//
	//   constructor() {
	//
	//       this.IsDirty = false;
	//   }

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private startDateTime: Date;
	public get StartDateTime() {
		return this.startDateTime;
	}
	public set StartDateTime(newValue: Date) {
		if (this.startDateTime != newValue) {
			this.startDateTime = newValue;
			this.MarkAsDirty('StartDateTime');
		}
	}

	private endDateTime: Date;
	public get EndDateTime() {
		return this.endDateTime;
	}
	public set EndDateTime(newValue: Date) {
		if (this.endDateTime != newValue) {
			this.endDateTime = newValue;
			this.MarkAsDirty('EndDateTime');
		}
	}

	private runResult: string;
	public get RunResult() {
		return this.runResult;
	}
	public set RunResult(newValue: string) {
		if (this.runResult != newValue) {
			this.runResult = newValue;
			this.MarkAsDirty('RunResult');
		}
	}

	private taskId: string;
	public get TaskId() {
		return this.taskId;
	}
	public set TaskId(newValue: string) {
		if (this.taskId != newValue) {
			this.taskId = newValue;
			this.MarkAsDirty('TaskId');
		}
	}

	private isError: boolean;
	public get IsError() {
		return this.isError;
	}
	public set IsError(newValue: boolean) {
		if (this.isError != newValue) {
			this.isError = newValue;
			this.MarkAsDirty('IsError');
		}
	}

	private startDateTimeUTC: Date;
	public get StartDateTimeUTC() {
		return this.startDateTimeUTC;
	}
	public set StartDateTimeUTC(newValue: Date) {
		if (this.startDateTimeUTC != newValue) {
			this.startDateTimeUTC = newValue;
			this.MarkAsDirty('StartDateTimeUTC');
		}
	}

	private endDateTimeUTC: Date;
	public get EndDateTimeUTC() {
		return this.endDateTimeUTC;
	}
	public set EndDateTimeUTC(newValue: Date) {
		if (this.endDateTimeUTC != newValue) {
			this.endDateTimeUTC = newValue;
			this.MarkAsDirty('EndDateTimeUTC');
		}
	}

	private logType: string;
	public get LogType() {
		return this.logType;
	}
	public set LogType(newValue: string) {
		if (this.logType != newValue) {
			this.logType = newValue;
			this.MarkAsDirty('LogType');
		}
	}

	private logFirstLine: string;
	public get LogFirstLine() {
		return this.logFirstLine;
	}
	public set LogFirstLine(newValue: string) {
		if (this.logFirstLine != newValue) {
			this.logFirstLine = newValue;
			this.MarkAsDirty('LogFirstLine');
		}
	}

	private duration: number;
	public get Duration() {
		return this.duration;
	}
	public set Duration(newValue: number) {
		if (this.duration != newValue) {
			this.duration = newValue;
			this.MarkAsDirty('Duration');
		}
	}

	private durationTS: string;
	public get DurationTS() {
		return this.durationTS;
	}
	public set DurationTS(newValue: string) {
		if (this.durationTS != newValue) {
			this.durationTS = newValue;
			this.MarkAsDirty('DurationTS');
		}
	}

	private logDocumentId: string;
	public get LogDocumentId() {
		return this.logDocumentId;
	}
	public set LogDocumentId(newValue: string) {
		if (this.logDocumentId != newValue) {
			this.logDocumentId = newValue;
			this.MarkAsDirty('LogDocumentId');
		}
	}

	public OldEntityPM: TaskSchedulerHistoryPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				//
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'TaskSchedulerHistory');
			}
		}
	}
	private MyClone: TaskSchedulerHistoryPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
