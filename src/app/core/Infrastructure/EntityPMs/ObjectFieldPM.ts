//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ObjectFieldValidationPM } from './ObjectFieldValidationPM';

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class ObjectFieldPM {
	//
	constructor() {
		//
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private fullNameTextCodeId: string;
	public get FullNameTextCodeId() {
		return this.fullNameTextCodeId;
	}
	public set FullNameTextCodeId(newValue: string) {
		if (this.fullNameTextCodeId != newValue) {
			this.fullNameTextCodeId = newValue;
			this.MarkAsDirty('FullNameTextCodeId');
		}
	}

	private objectTableId: string;
	public get ObjectTableId() {
		return this.objectTableId;
	}
	public set ObjectTableId(newValue: string) {
		if (this.objectTableId != newValue) {
			this.objectTableId = newValue;
			this.MarkAsDirty('ObjectTableId');
		}
	}

	private fieldName: string;
	public get FieldName() {
		return this.fieldName;
	}
	public set FieldName(newValue: string) {
		if (this.fieldName != newValue) {
			this.fieldName = newValue;
			this.MarkAsDirty('FieldName');
		}
	}

	private dataTypeCode: string;
	public get DataTypeCode() {
		return this.dataTypeCode;
	}
	public set DataTypeCode(newValue: string) {
		if (this.dataTypeCode != newValue) {
			this.dataTypeCode = newValue;
			this.MarkAsDirty('DataTypeCode');
		}
	}

	private maxLength: number;
	public get MaxLength() {
		return this.maxLength;
	}
	public set MaxLength(newValue: number) {
		if (this.maxLength != newValue) {
			this.maxLength = newValue;
			this.MarkAsDirty('MaxLength');
		}
	}

	private isRequiered: boolean;
	public get IsRequiered() {
		return this.isRequiered;
	}
	public set IsRequiered(newValue: boolean) {
		if (this.isRequiered != newValue) {
			this.isRequiered = newValue;
			this.MarkAsDirty('IsRequiered');
		}
	}

	private isCustom: boolean;
	public get IsCustom() {
		return this.isCustom;
	}
	public set IsCustom(newValue: boolean) {
		if (this.isCustom != newValue) {
			this.isCustom = newValue;
			this.MarkAsDirty('IsCustom');
		}
	}

	private helpTextCodeId: string;
	public get HelpTextCodeId() {
		return this.helpTextCodeId;
	}
	public set HelpTextCodeId(newValue: string) {
		if (this.helpTextCodeId != newValue) {
			this.helpTextCodeId = newValue;
			this.MarkAsDirty('HelpTextCodeId');
		}
	}

	private minLength: number;
	public get MinLength() {
		return this.minLength;
	}
	public set MinLength(newValue: number) {
		if (this.minLength != newValue) {
			this.minLength = newValue;
			this.MarkAsDirty('MinLength');
		}
	}

	private lookUpTableId: string;
	public get LookUpTableId() {
		return this.lookUpTableId;
	}
	public set LookUpTableId(newValue: string) {
		if (this.lookUpTableId != newValue) {
			this.lookUpTableId = newValue;
			this.MarkAsDirty('LookUpTableId');
		}
	}

	private displayOnLookUp: boolean;
	public get DisplayOnLookUp() {
		return this.displayOnLookUp;
	}
	public set DisplayOnLookUp(newValue: boolean) {
		if (this.displayOnLookUp != newValue) {
			this.displayOnLookUp = newValue;
			this.MarkAsDirty('DisplayOnLookUp');
		}
	}

	private canFilter: boolean;
	public get CanFilter() {
		return this.canFilter;
	}
	public set CanFilter(newValue: boolean) {
		if (this.canFilter != newValue) {
			this.canFilter = newValue;
			this.MarkAsDirty('CanFilter');
		}
	}

	private displayOnly: boolean;
	public get DisplayOnly() {
		return this.displayOnly;
	}
	public set DisplayOnly(newValue: boolean) {
		if (this.displayOnly != newValue) {
			this.displayOnly = newValue;
			this.MarkAsDirty('DisplayOnly');
		}
	}

	private systemRequired: boolean;
	public get SystemRequired() {
		return this.systemRequired;
	}
	public set SystemRequired(newValue: boolean) {
		if (this.systemRequired != newValue) {
			this.systemRequired = newValue;
			this.MarkAsDirty('SystemRequired');
		}
	}

	private systemMaxLength: number;
	public get SystemMaxLength() {
		return this.systemMaxLength;
	}
	public set SystemMaxLength(newValue: number) {
		if (this.systemMaxLength != newValue) {
			this.systemMaxLength = newValue;
			this.MarkAsDirty('SystemMaxLength');
		}
	}

	private listTextCodeId: string;
	public get ListTextCodeId() {
		return this.listTextCodeId;
	}
	public set ListTextCodeId(newValue: string) {
		if (this.listTextCodeId != newValue) {
			this.listTextCodeId = newValue;
			this.MarkAsDirty('ListTextCodeId');
		}
	}

	private displayInList: boolean;
	public get DisplayInList() {
		return this.displayInList;
	}
	public set DisplayInList(newValue: boolean) {
		if (this.displayInList != newValue) {
			this.displayInList = newValue;
			this.MarkAsDirty('DisplayInList');
		}
	}

	private converterName: string;
	public get ConverterName() {
		return this.converterName;
	}
	public set ConverterName(newValue: string) {
		if (this.converterName != newValue) {
			this.converterName = newValue;
			this.MarkAsDirty('ConverterName');
		}
	}

	private dataTemplateName: string;
	public get DataTemplateName() {
		return this.dataTemplateName;
	}
	public set DataTemplateName(newValue: string) {
		if (this.dataTemplateName != newValue) {
			this.dataTemplateName = newValue;
			this.MarkAsDirty('DataTemplateName');
		}
	}

	private isCustomFilter: boolean;
	public get IsCustomFilter() {
		return this.isCustomFilter;
	}
	public set IsCustomFilter(newValue: boolean) {
		if (this.isCustomFilter != newValue) {
			this.isCustomFilter = newValue;
			this.MarkAsDirty('IsCustomFilter');
		}
	}

	private operator: string;
	public get Operator() {
		return this.operator;
	}
	public set Operator(newValue: string) {
		if (this.operator != newValue) {
			this.operator = newValue;
			this.MarkAsDirty('Operator');
		}
	}

	private multiLine: boolean;
	public get MultiLine() {
		return this.multiLine;
	}
	public set MultiLine(newValue: boolean) {
		if (this.multiLine != newValue) {
			this.multiLine = newValue;
			this.MarkAsDirty('MultiLine');
		}
	}

	private isTimeFrameFilter: boolean;
	public get IsTimeFrameFilter() {
		return this.isTimeFrameFilter;
	}
	public set IsTimeFrameFilter(newValue: boolean) {
		if (this.isTimeFrameFilter != newValue) {
			this.isTimeFrameFilter = newValue;
			this.MarkAsDirty('IsTimeFrameFilter');
		}
	}

	private displayInSearchWindowList: boolean;
	public get DisplayInSearchWindowList() {
		return this.displayInSearchWindowList;
	}
	public set DisplayInSearchWindowList(newValue: boolean) {
		if (this.displayInSearchWindowList != newValue) {
			this.displayInSearchWindowList = newValue;
			this.MarkAsDirty('DisplayInSearchWindowList');
		}
	}

	private displayInSearchWindowFilters: boolean;
	public get DisplayInSearchWindowFilters() {
		return this.displayInSearchWindowFilters;
	}
	public set DisplayInSearchWindowFilters(newValue: boolean) {
		if (this.displayInSearchWindowFilters != newValue) {
			this.displayInSearchWindowFilters = newValue;
			this.MarkAsDirty('DisplayInSearchWindowFilters');
		}
	}

	private pMPropertyPath: string;
	public get PMPropertyPath() {
		return this.pMPropertyPath;
	}
	public set PMPropertyPath(newValue: string) {
		if (this.pMPropertyPath != newValue) {
			this.pMPropertyPath = newValue;
			this.MarkAsDirty('PMPropertyPath');
		}
	}

	private listPropertyPath: string;
	public get ListPropertyPath() {
		return this.listPropertyPath;
	}
	public set ListPropertyPath(newValue: string) {
		if (this.listPropertyPath != newValue) {
			this.listPropertyPath = newValue;
			this.MarkAsDirty('ListPropertyPath');
		}
	}

	private lookUpControlName: string;
	public get LookUpControlName() {
		return this.lookUpControlName;
	}
	public set LookUpControlName(newValue: string) {
		if (this.lookUpControlName != newValue) {
			this.lookUpControlName = newValue;
			this.MarkAsDirty('LookUpControlName');
		}
	}

	private displayInLookUpIndex: number;
	public get DisplayInLookUpIndex() {
		return this.displayInLookUpIndex;
	}
	public set DisplayInLookUpIndex(newValue: number) {
		if (this.displayInLookUpIndex != newValue) {
			this.displayInLookUpIndex = newValue;
			this.MarkAsDirty('DisplayInLookUpIndex');
		}
	}

	private automaticField: boolean;
	public get AutomaticField() {
		return this.automaticField;
	}
	public set AutomaticField(newValue: boolean) {
		if (this.automaticField != newValue) {
			this.automaticField = newValue;
			this.MarkAsDirty('AutomaticField');
		}
	}

	private uniqueField: boolean;
	public get UniqueField() {
		return this.uniqueField;
	}
	public set UniqueField(newValue: boolean) {
		if (this.uniqueField != newValue) {
			this.uniqueField = newValue;
			this.MarkAsDirty('UniqueField');
		}
	}

	private shortNameTextCodeId: string;
	public get ShortNameTextCodeId() {
		return this.shortNameTextCodeId;
	}
	public set ShortNameTextCodeId(newValue: string) {
		if (this.shortNameTextCodeId != newValue) {
			this.shortNameTextCodeId = newValue;
			this.MarkAsDirty('ShortNameTextCodeId');
		}
	}

	private displayInSearchWindowListIndex: number;
	public get DisplayInSearchWindowListIndex() {
		return this.displayInSearchWindowListIndex;
	}
	public set DisplayInSearchWindowListIndex(newValue: number) {
		if (this.displayInSearchWindowListIndex != newValue) {
			this.displayInSearchWindowListIndex = newValue;
			this.MarkAsDirty('DisplayInSearchWindowListIndex');
		}
	}

	private displayInSearchWindowFiltersIndex: number;
	public get DisplayInSearchWindowFiltersIndex() {
		return this.displayInSearchWindowFiltersIndex;
	}
	public set DisplayInSearchWindowFiltersIndex(newValue: number) {
		if (this.displayInSearchWindowFiltersIndex != newValue) {
			this.displayInSearchWindowFiltersIndex = newValue;
			this.MarkAsDirty('DisplayInSearchWindowFiltersIndex');
		}
	}

	private isMulti: boolean;
	public get IsMulti() {
		return this.isMulti;
	}
	public set IsMulti(newValue: boolean) {
		if (this.isMulti != newValue) {
			this.isMulti = newValue;
			this.MarkAsDirty('IsMulti');
		}
	}

	private multiTableId: string;
	public get MultiTableId() {
		return this.multiTableId;
	}
	public set MultiTableId(newValue: string) {
		if (this.multiTableId != newValue) {
			this.multiTableId = newValue;
			this.MarkAsDirty('MultiTableId');
		}
	}

	private dependencyFilter1Value: string;
	public get DependencyFilter1Value() {
		return this.dependencyFilter1Value;
	}
	public set DependencyFilter1Value(newValue: string) {
		if (this.dependencyFilter1Value != newValue) {
			this.dependencyFilter1Value = newValue;
			this.MarkAsDirty('DependencyFilter1Value');
		}
	}

	private dependencyFilter2Value: string;
	public get DependencyFilter2Value() {
		return this.dependencyFilter2Value;
	}
	public set DependencyFilter2Value(newValue: string) {
		if (this.dependencyFilter2Value != newValue) {
			this.dependencyFilter2Value = newValue;
			this.MarkAsDirty('DependencyFilter2Value');
		}
	}

	private dependencyFilter3Value: string;
	public get DependencyFilter3Value() {
		return this.dependencyFilter3Value;
	}
	public set DependencyFilter3Value(newValue: string) {
		if (this.dependencyFilter3Value != newValue) {
			this.dependencyFilter3Value = newValue;
			this.MarkAsDirty('DependencyFilter3Value');
		}
	}

	private dependencyFilter1Type: string;
	public get DependencyFilter1Type() {
		return this.dependencyFilter1Type;
	}
	public set DependencyFilter1Type(newValue: string) {
		if (this.dependencyFilter1Type != newValue) {
			this.dependencyFilter1Type = newValue;
			this.MarkAsDirty('DependencyFilter1Type');
		}
	}

	private dependencyFilter2Type: string;
	public get DependencyFilter2Type() {
		return this.dependencyFilter2Type;
	}
	public set DependencyFilter2Type(newValue: string) {
		if (this.dependencyFilter2Type != newValue) {
			this.dependencyFilter2Type = newValue;
			this.MarkAsDirty('DependencyFilter2Type');
		}
	}

	private dependencyFilter3Type: string;
	public get DependencyFilter3Type() {
		return this.dependencyFilter3Type;
	}
	public set DependencyFilter3Type(newValue: string) {
		if (this.dependencyFilter3Type != newValue) {
			this.dependencyFilter3Type = newValue;
			this.MarkAsDirty('DependencyFilter3Type');
		}
	}

	private dependencyFilter1IsList: boolean;
	public get DependencyFilter1IsList() {
		return this.dependencyFilter1IsList;
	}
	public set DependencyFilter1IsList(newValue: boolean) {
		if (this.dependencyFilter1IsList != newValue) {
			this.dependencyFilter1IsList = newValue;
			this.MarkAsDirty('DependencyFilter1IsList');
		}
	}

	private dependencyFilter2IsList: boolean;
	public get DependencyFilter2IsList() {
		return this.dependencyFilter2IsList;
	}
	public set DependencyFilter2IsList(newValue: boolean) {
		if (this.dependencyFilter2IsList != newValue) {
			this.dependencyFilter2IsList = newValue;
			this.MarkAsDirty('DependencyFilter2IsList');
		}
	}

	private dependencyFilter3IsList: boolean;
	public get DependencyFilter3IsList() {
		return this.dependencyFilter3IsList;
	}
	public set DependencyFilter3IsList(newValue: boolean) {
		if (this.dependencyFilter3IsList != newValue) {
			this.dependencyFilter3IsList = newValue;
			this.MarkAsDirty('DependencyFilter3IsList');
		}
	}

	private controlField1: string;
	public get ControlField1() {
		return this.controlField1;
	}
	public set ControlField1(newValue: string) {
		if (this.controlField1 != newValue) {
			this.controlField1 = newValue;
			this.MarkAsDirty('ControlField1');
		}
	}

	private controlField2: string;
	public get ControlField2() {
		return this.controlField2;
	}
	public set ControlField2(newValue: string) {
		if (this.controlField2 != newValue) {
			this.controlField2 = newValue;
			this.MarkAsDirty('ControlField2');
		}
	}

	private controlField3: string;
	public get ControlField3() {
		return this.controlField3;
	}
	public set ControlField3(newValue: string) {
		if (this.controlField3 != newValue) {
			this.controlField3 = newValue;
			this.MarkAsDirty('ControlField3');
		}
	}

	private numberOfDigits: number;
	public get NumberOfDigits() {
		return this.numberOfDigits;
	}
	public set NumberOfDigits(newValue: number) {
		if (this.numberOfDigits != newValue) {
			this.numberOfDigits = newValue;
			this.MarkAsDirty('NumberOfDigits');
		}
	}

	private objectTableName: string;
	public get ObjectTableName() {
		return this.objectTableName;
	}
	public set ObjectTableName(newValue: string) {
		if (this.objectTableName != newValue) {
			this.objectTableName = newValue;
			this.MarkAsDirty('ObjectTableName');
		}
	}

	private fullNameTextCodeDefaultText: string;
	public get FullNameTextCodeDefaultText() {
		return this.fullNameTextCodeDefaultText;
	}
	public set FullNameTextCodeDefaultText(newValue: string) {
		if (this.fullNameTextCodeDefaultText != newValue) {
			this.fullNameTextCodeDefaultText = newValue;
			this.MarkAsDirty('FullNameTextCodeDefaultText');
		}
	}

	private fullNameTextCodeLocalDefaultText: string;
	public get FullNameTextCodeLocalDefaultText() {
		return this.fullNameTextCodeLocalDefaultText;
	}
	public set FullNameTextCodeLocalDefaultText(newValue: string) {
		if (this.fullNameTextCodeLocalDefaultText != newValue) {
			this.fullNameTextCodeLocalDefaultText = newValue;
			this.MarkAsDirty('FullNameTextCodeLocalDefaultText');
		}
	}

	private objectTable_LookUpTableName: string;
	public get ObjectTable_LookUpTableName() {
		return this.objectTable_LookUpTableName;
	}
	public set ObjectTable_LookUpTableName(newValue: string) {
		if (this.objectTable_LookUpTableName != newValue) {
			this.objectTable_LookUpTableName = newValue;
			this.MarkAsDirty('ObjectTable_LookUpTableName');
		}
	}

	private objectTable_MultiTableName: string;
	public get ObjectTable_MultiTableName() {
		return this.objectTable_MultiTableName;
	}
	public set ObjectTable_MultiTableName(newValue: string) {
		if (this.objectTable_MultiTableName != newValue) {
			this.objectTable_MultiTableName = newValue;
			this.MarkAsDirty('ObjectTable_MultiTableName');
		}
	}

	private helpTextCodeCode: string;
	public get HelpTextCodeCode() {
		return this.helpTextCodeCode;
	}
	public set HelpTextCodeCode(newValue: string) {
		if (this.helpTextCodeCode != newValue) {
			this.helpTextCodeCode = newValue;
			this.MarkAsDirty('HelpTextCodeCode');
		}
	}

	private fullNameTextCodeCode: string;
	public get FullNameTextCodeCode() {
		return this.fullNameTextCodeCode;
	}
	public set FullNameTextCodeCode(newValue: string) {
		if (this.fullNameTextCodeCode != newValue) {
			this.fullNameTextCodeCode = newValue;
			this.MarkAsDirty('FullNameTextCodeCode');
		}
	}

	private listTextCodeCode: string;
	public get ListTextCodeCode() {
		return this.listTextCodeCode;
	}
	public set ListTextCodeCode(newValue: string) {
		if (this.listTextCodeCode != newValue) {
			this.listTextCodeCode = newValue;
			this.MarkAsDirty('ListTextCodeCode');
		}
	}

	private shortNameTextCodeCode: string;
	public get ShortNameTextCodeCode() {
		return this.shortNameTextCodeCode;
	}
	public set ShortNameTextCodeCode(newValue: string) {
		if (this.shortNameTextCodeCode != newValue) {
			this.shortNameTextCodeCode = newValue;
			this.MarkAsDirty('ShortNameTextCodeCode');
		}
	}

	private listTextCodeDefaultText: string;
	public get ListTextCodeDefaultText() {
		return this.listTextCodeDefaultText;
	}
	public set ListTextCodeDefaultText(newValue: string) {
		if (this.listTextCodeDefaultText != newValue) {
			this.listTextCodeDefaultText = newValue;
			this.MarkAsDirty('ListTextCodeDefaultText');
		}
	}

	private helpTextCodeDefaultText: string;
	public get HelpTextCodeDefaultText() {
		return this.helpTextCodeDefaultText;
	}
	public set HelpTextCodeDefaultText(newValue: string) {
		if (this.helpTextCodeDefaultText != newValue) {
			this.helpTextCodeDefaultText = newValue;
			this.MarkAsDirty('HelpTextCodeDefaultText');
		}
	}

	private validForQuerySection1: string;
	public get ValidForQuerySection1() {
		return this.validForQuerySection1;
	}
	public set ValidForQuerySection1(newValue: string) {
		if (this.validForQuerySection1 != newValue) {
			this.validForQuerySection1 = newValue;
			this.MarkAsDirty('ValidForQuerySection1');
		}
	}

	private validForQuerySection2: string;
	public get ValidForQuerySection2() {
		return this.validForQuerySection2;
	}
	public set ValidForQuerySection2(newValue: string) {
		if (this.validForQuerySection2 != newValue) {
			this.validForQuerySection2 = newValue;
			this.MarkAsDirty('ValidForQuerySection2');
		}
	}

	private isRestrictable: boolean;
	public get IsRestrictable() {
		return this.isRestrictable;
	}
	public set IsRestrictable(newValue: boolean) {
		if (this.isRestrictable != newValue) {
			this.isRestrictable = newValue;
			this.MarkAsDirty('IsRestrictable');
		}
	}

	private displayInEntityVariables: boolean;
	public get DisplayInEntityVariables() {
		return this.displayInEntityVariables;
	}
	public set DisplayInEntityVariables(newValue: boolean) {
		if (this.displayInEntityVariables != newValue) {
			this.displayInEntityVariables = newValue;
			this.MarkAsDirty('DisplayInEntityVariables');
		}
	}

	private textCase: string;
	public get TextCase() {
		return this.textCase;
	}
	public set TextCase(newValue: string) {
		if (this.textCase != newValue) {
			this.textCase = newValue;
			this.MarkAsDirty('TextCase');
		}
	}

	private digitsAfterPoint: number;
	public get DigitsAfterPoint() {
		return this.digitsAfterPoint;
	}
	public set DigitsAfterPoint(newValue: number) {
		if (this.digitsAfterPoint != newValue) {
			this.digitsAfterPoint = newValue;
			this.MarkAsDirty('DigitsAfterPoint');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private displayInLookupColumnSize: string;
	public get DisplayInLookupColumnSize() {
		return this.displayInLookupColumnSize;
	}
	public set DisplayInLookupColumnSize(newValue: string) {
		if (this.displayInLookupColumnSize != newValue) {
			this.displayInLookupColumnSize = newValue;
			this.MarkAsDirty('DisplayInLookupColumnSize');
		}
	}

	private displayLongName: boolean;
	public get DisplayLongName() {
		return this.displayLongName;
	}
	public set DisplayLongName(newValue: boolean) {
		if (this.displayLongName != newValue) {
			this.displayLongName = newValue;
			this.MarkAsDirty('DisplayLongName');
		}
	}

	private columnHeaderTemplateName: string;
	public get ColumnHeaderTemplateName() {
		return this.columnHeaderTemplateName;
	}
	public set ColumnHeaderTemplateName(newValue: string) {
		if (this.columnHeaderTemplateName != newValue) {
			this.columnHeaderTemplateName = newValue;
			this.MarkAsDirty('ColumnHeaderTemplateName');
		}
	}

	private userTenant: number;
	public get UserTenant() {
		return this.userTenant;
	}
	public set UserTenant(newValue: number) {
		if (this.userTenant != newValue) {
			this.userTenant = newValue;
			this.MarkAsDirty('UserTenant');
		}
	}

	private tenantZeroIsRequired: boolean;
	public get TenantZeroIsRequired() {
		return this.tenantZeroIsRequired;
	}
	public set TenantZeroIsRequired(newValue: boolean) {
		if (this.tenantZeroIsRequired != newValue) {
			this.tenantZeroIsRequired = newValue;
			this.MarkAsDirty('TenantZeroIsRequired');
		}
	}

	private tenantZeroMaxLength: number;
	public get TenantZeroMaxLength() {
		return this.tenantZeroMaxLength;
	}
	public set TenantZeroMaxLength(newValue: number) {
		if (this.tenantZeroMaxLength != newValue) {
			this.tenantZeroMaxLength = newValue;
			this.MarkAsDirty('TenantZeroMaxLength');
		}
	}

	private tenantZeroMinLength: number;
	public get TenantZeroMinLength() {
		return this.tenantZeroMinLength;
	}
	public set TenantZeroMinLength(newValue: number) {
		if (this.tenantZeroMinLength != newValue) {
			this.tenantZeroMinLength = newValue;
			this.MarkAsDirty('TenantZeroMinLength');
		}
	}

	private restorDefault: boolean;
	public get RestorDefault() {
		return this.restorDefault;
	}
	public set RestorDefault(newValue: boolean) {
		if (this.restorDefault != newValue) {
			this.restorDefault = newValue;
			this.MarkAsDirty('RestorDefault');
		}
	}

	private customerPermissionTypeCode: string;
	public get CustomerPermissionTypeCode() {
		return this.customerPermissionTypeCode;
	}
	public set CustomerPermissionTypeCode(newValue: string) {
		if (this.customerPermissionTypeCode != newValue) {
			this.customerPermissionTypeCode = newValue;
			this.MarkAsDirty('CustomerPermissionTypeCode');
		}
	}

	private agentPermissionTypeCode: string;
	public get AgentPermissionTypeCode() {
		return this.agentPermissionTypeCode;
	}
	public set AgentPermissionTypeCode(newValue: string) {
		if (this.agentPermissionTypeCode != newValue) {
			this.agentPermissionTypeCode = newValue;
			this.MarkAsDirty('AgentPermissionTypeCode');
		}
	}

	private customPickListCode: string;
	public get CustomPickListCode() {
		return this.customPickListCode;
	}
	public set CustomPickListCode(newValue: string) {
		if (this.customPickListCode != newValue) {
			this.customPickListCode = newValue;
			this.MarkAsDirty('CustomPickListCode');
		}
	}

	private shortNameTextCodeDefaultText: string;
	public get ShortNameTextCodeDefaultText() {
		return this.shortNameTextCodeDefaultText;
	}
	public set ShortNameTextCodeDefaultText(newValue: string) {
		if (this.shortNameTextCodeDefaultText != newValue) {
			this.shortNameTextCodeDefaultText = newValue;
			this.MarkAsDirty('ShortNameTextCodeDefaultText');
		}
	}

	private isMaxLength: boolean;
	public get IsMaxLength() {
		return this.isMaxLength;
	}
	public set IsMaxLength(newValue: boolean) {
		if (this.isMaxLength != newValue) {
			this.isMaxLength = newValue;
			this.MarkAsDirty('IsMaxLength');
		}
	}

	private allowedinAutomationConditions: boolean;
	public get AllowedinAutomationConditions() {
		return this.allowedinAutomationConditions;
	}
	public set AllowedinAutomationConditions(newValue: boolean) {
		if (this.allowedinAutomationConditions != newValue) {
			this.allowedinAutomationConditions = newValue;
			this.MarkAsDirty('AllowedinAutomationConditions');
		}
	}

	private automationEmailRecipient: boolean;
	public get AutomationEmailRecipient() {
		return this.automationEmailRecipient;
	}
	public set AutomationEmailRecipient(newValue: boolean) {
		if (this.automationEmailRecipient != newValue) {
			this.automationEmailRecipient = newValue;
			this.MarkAsDirty('AutomationEmailRecipient');
		}
	}

	private allowedInAirlineMessaging: boolean;
	public get AllowedInAirlineMessaging() {
		return this.allowedInAirlineMessaging;
	}
	public set AllowedInAirlineMessaging(newValue: boolean) {
		if (this.allowedInAirlineMessaging != newValue) {
			this.allowedInAirlineMessaging = newValue;
			this.MarkAsDirty('AllowedInAirlineMessaging');
		}
	}

	private canAutomateSetValue: boolean;
	public get CanAutomateSetValue() {
		return this.canAutomateSetValue;
	}
	public set CanAutomateSetValue(newValue: boolean) {
		if (this.canAutomateSetValue != newValue) {
			this.canAutomateSetValue = newValue;
			this.MarkAsDirty('CanAutomateSetValue');
		}
	}

	private displayInDocumentReferences: boolean;
	public get DisplayInDocumentReferences() {
		return this.displayInDocumentReferences;
	}
	public set DisplayInDocumentReferences(newValue: boolean) {
		if (this.displayInDocumentReferences != newValue) {
			this.displayInDocumentReferences = newValue;
			this.MarkAsDirty('DisplayInDocumentReferences');
		}
	}

	private allowedInCustomerFieldsSettings: boolean;
	public get AllowedInCustomerFieldsSettings() {
		return this.allowedInCustomerFieldsSettings;
	}
	public set AllowedInCustomerFieldsSettings(newValue: boolean) {
		if (this.allowedInCustomerFieldsSettings != newValue) {
			this.allowedInCustomerFieldsSettings = newValue;
			this.MarkAsDirty('AllowedInCustomerFieldsSettings');
		}
	}

	private generatedComponentPath: string;
	public get GeneratedComponentPath() {
		return this.generatedComponentPath;
	}
	public set GeneratedComponentPath(newValue: string) {
		if (this.generatedComponentPath != newValue) {
			this.generatedComponentPath = newValue;
			this.MarkAsDirty('GeneratedComponentPath');
		}
	}

	private displayOnLookUpLocal: boolean;
	public get DisplayOnLookUpLocal() {
		return this.displayOnLookUpLocal;
	}
	public set DisplayOnLookUpLocal(newValue: boolean) {
		if (this.displayOnLookUpLocal != newValue) {
			this.displayOnLookUpLocal = newValue;
			this.MarkAsDirty('DisplayOnLookUpLocal');
		}
	}

	private displayInAutomationAsEnitity: boolean;
	public get DisplayInAutomationAsEnitity() {
		return this.displayInAutomationAsEnitity;
	}
	public set DisplayInAutomationAsEnitity(newValue: boolean) {
		if (this.displayInAutomationAsEnitity != newValue) {
			this.displayInAutomationAsEnitity = newValue;
			this.MarkAsDirty('DisplayInAutomationAsEnitity');
		}
	}

	private recordType: string;
	public get RecordType() {
		return this.recordType;
	}
	public set RecordType(newValue: string) {
		if (this.recordType != newValue) {
			this.recordType = newValue;
			this.MarkAsDirty('RecordType');
		}
	}

	private fieldCode: string;
	public get FieldCode() {
		return this.fieldCode;
	}
	public set FieldCode(newValue: string) {
		if (this.fieldCode != newValue) {
			this.fieldCode = newValue;
			this.MarkAsDirty('FieldCode');
		}
	}

	private objectFieldValidations: ObjectFieldValidationPM[];
	get ObjectFieldValidations() {
		if (this.objectFieldValidations == null) {
			this.objectFieldValidations = [];
		}

		return this.objectFieldValidations;
	}
	set ObjectFieldValidations(newValue: ObjectFieldValidationPM[]) {
		if (this.objectFieldValidations != newValue) {
			this.objectFieldValidations = newValue;
		}
	}
	public AddObjectFieldValidationPM(item: ObjectFieldValidationPM) {
		if (item != null) {
			var index = this.ObjectFieldValidations.indexOf(item);
			if (index == -1) {
				item.EntityParentPM = this;

				this.ObjectFieldValidations.push(item);
				this.MarkAsDirty();
			}
		}
	}
	public RemoveObjectFieldValidationPM(item: ObjectFieldValidationPM) {
		if (item != null) {
			var index = this.ObjectFieldValidations.indexOf(item);
			if (index > -1) {
				this.ObjectFieldValidations.splice(index, 1);
				this.MarkAsDirty();
			}
		}
	}
	//public ObjectFieldValidations: Array<ObjectFieldValidationPMPM>= [];
	private hasTemplate: boolean;
	public get HasTemplate() {
		return this.hasTemplate;
	}
	public set HasTemplate(newValue: boolean) {
		if (this.hasTemplate != newValue) {
			this.hasTemplate = newValue;
			this.MarkAsDirty('HasTemplate');
		}
	}

	private htmlHeaderComponentUrl: string;
	public get HtmlHeaderComponentUrl() {
		return this.htmlHeaderComponentUrl;
	}
	public set HtmlHeaderComponentUrl(newValue: string) {
		if (this.htmlHeaderComponentUrl != newValue) {
			this.htmlHeaderComponentUrl = newValue;
			this.MarkAsDirty('HtmlHeaderComponentUrl');
		}
	}

	private htmlListComponentUrl: string;
	public get HtmlListComponentUrl() {
		return this.htmlListComponentUrl;
	}
	public set HtmlListComponentUrl(newValue: string) {
		if (this.htmlListComponentUrl != newValue) {
			this.htmlListComponentUrl = newValue;
			this.MarkAsDirty('HtmlListComponentUrl');
		}
	}

	private htmlHeaderComponentName: string;
	public get HtmlHeaderComponentName() {
		return this.htmlHeaderComponentName;
	}
	public set HtmlHeaderComponentName(newValue: string) {
		if (this.htmlHeaderComponentName != newValue) {
			this.htmlHeaderComponentName = newValue;
			this.MarkAsDirty('HtmlHeaderComponentName');
		}
	}

	private htmlListComponentName: string;
	public get HtmlListComponentName() {
		return this.htmlListComponentName;
	}
	public set HtmlListComponentName(newValue: string) {
		if (this.htmlListComponentName != newValue) {
			this.htmlListComponentName = newValue;
			this.MarkAsDirty('HtmlListComponentName');
		}
	}

	private fullLabelTranslatedText: string;
	public get FullLabelTranslatedText() {
		return this.fullLabelTranslatedText;
	}
	public set FullLabelTranslatedText(newValue: string) {
		if (this.fullLabelTranslatedText != newValue) {
			this.fullLabelTranslatedText = newValue;
			this.MarkAsDirty('FullLabelTranslatedText');
		}
	}

	private shortLabelTranslatedText: string;
	public get ShortLabelTranslatedText() {
		return this.shortLabelTranslatedText;
	}
	public set ShortLabelTranslatedText(newValue: string) {
		if (this.shortLabelTranslatedText != newValue) {
			this.shortLabelTranslatedText = newValue;
			this.MarkAsDirty('ShortLabelTranslatedText');
		}
	}

	private listHeaderLabelTranslatedText: string;
	public get ListHeaderLabelTranslatedText() {
		return this.listHeaderLabelTranslatedText;
	}
	public set ListHeaderLabelTranslatedText(newValue: string) {
		if (this.listHeaderLabelTranslatedText != newValue) {
			this.listHeaderLabelTranslatedText = newValue;
			this.MarkAsDirty('ListHeaderLabelTranslatedText');
		}
	}

	private helpTextTranslatedText: string;
	public get HelpTextTranslatedText() {
		return this.helpTextTranslatedText;
	}
	public set HelpTextTranslatedText(newValue: string) {
		if (this.helpTextTranslatedText != newValue) {
			this.helpTextTranslatedText = newValue;
			this.MarkAsDirty('HelpTextTranslatedText');
		}
	}

	private fullLabelFieldTranslationId: string;
	public get FullLabelFieldTranslationId() {
		return this.fullLabelFieldTranslationId;
	}
	public set FullLabelFieldTranslationId(newValue: string) {
		if (this.fullLabelFieldTranslationId != newValue) {
			this.fullLabelFieldTranslationId = newValue;
			this.MarkAsDirty('FullLabelFieldTranslationId');
		}
	}

	private shortLabelFieldTranslationId: string;
	public get ShortLabelFieldTranslationId() {
		return this.shortLabelFieldTranslationId;
	}
	public set ShortLabelFieldTranslationId(newValue: string) {
		if (this.shortLabelFieldTranslationId != newValue) {
			this.shortLabelFieldTranslationId = newValue;
			this.MarkAsDirty('ShortLabelFieldTranslationId');
		}
	}

	private listHeaderLabelFieldTranslationId: string;
	public get ListHeaderLabelFieldTranslationId() {
		return this.listHeaderLabelFieldTranslationId;
	}
	public set ListHeaderLabelFieldTranslationId(newValue: string) {
		if (this.listHeaderLabelFieldTranslationId != newValue) {
			this.listHeaderLabelFieldTranslationId = newValue;
			this.MarkAsDirty('ListHeaderLabelFieldTranslationId');
		}
	}

	private helpTextFieldTranslationId: string;
	public get HelpTextFieldTranslationId() {
		return this.helpTextFieldTranslationId;
	}
	public set HelpTextFieldTranslationId(newValue: string) {
		if (this.helpTextFieldTranslationId != newValue) {
			this.helpTextFieldTranslationId = newValue;
			this.MarkAsDirty('HelpTextFieldTranslationId');
		}
	}

	private code: string;
	public get Code() {
		return this.code;
	}
	public set Code(newValue: string) {
		if (this.code != newValue) {
			this.code = newValue;
			this.MarkAsDirty('Code');
		}
	}

	private copyToDW: boolean;
	public get CopyToDW() {
		return this.copyToDW;
	}
	public set CopyToDW(newValue: boolean) {
		if (this.copyToDW != newValue) {
			this.copyToDW = newValue;
			this.MarkAsDirty('CopyToDW');
		}
	}

	private enableFullscreenTextBox: boolean;
	public get EnableFullscreenTextBox() {
		return this.enableFullscreenTextBox;
	}
	public set EnableFullscreenTextBox(newValue: boolean) {
		if (this.enableFullscreenTextBox != newValue) {
			this.enableFullscreenTextBox = newValue;
			this.MarkAsDirty('EnableFullscreenTextBox');
		}
	}

	private additionalQuerySections: string;
	public get AdditionalQuerySections() {
		return this.additionalQuerySections;
	}
	public set AdditionalQuerySections(newValue: string) {
		if (this.additionalQuerySections != newValue) {
			this.additionalQuerySections = newValue;
			this.MarkAsDirty('AdditionalQuerySections');
		}
	}

	public OldEntityPM: ObjectFieldPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'ObjectField');
			}
		}
	}
	private MyClone: ObjectFieldPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
