//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

// import {UIProperties, UIProperty} from '../../Infrastructure/Components/LogitudeComponents/UIProperties';
import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class TenantPM {
	//   @Output() PropertyChanged: EventEmitter<PropertyChangedArgs> = new EventEmitter<PropertyChangedArgs>();
	//
	//   constructor() {
	//
	//       this.IsDirty = false;
	//   }

	private id: number;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: number) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private addressId: string;
	public get AddressId() {
		return this.addressId;
	}
	public set AddressId(newValue: string) {
		if (this.addressId != newValue) {
			this.addressId = newValue;
			this.MarkAsDirty('AddressId');
		}
	}

	private localAddressId: string;
	public get LocalAddressId() {
		return this.localAddressId;
	}
	public set LocalAddressId(newValue: string) {
		if (this.localAddressId != newValue) {
			this.localAddressId = newValue;
			this.MarkAsDirty('LocalAddressId');
		}
	}

	private companyAddress: string;
	public get CompanyAddress() {
		return this.companyAddress;
	}
	public set CompanyAddress(newValue: string) {
		if (this.companyAddress != newValue) {
			this.companyAddress = newValue;
			this.MarkAsDirty('CompanyAddress');
		}
	}

	private company: string;
	public get Company() {
		return this.company;
	}
	public set Company(newValue: string) {
		if (this.company != newValue) {
			this.company = newValue;
			this.MarkAsDirty('Company');
		}
	}

	private signature: string;
	public get Signature() {
		return this.signature;
	}
	public set Signature(newValue: string) {
		if (this.signature != newValue) {
			this.signature = newValue;
			this.MarkAsDirty('Signature');
		}
	}

	private iATA: string;
	public get IATA() {
		return this.iATA;
	}
	public set IATA(newValue: string) {
		if (this.iATA != newValue) {
			this.iATA = newValue;
			this.MarkAsDirty('IATA');
		}
	}

	private vatNumber: string;
	public get VatNumber() {
		return this.vatNumber;
	}
	public set VatNumber(newValue: string) {
		if (this.vatNumber != newValue) {
			this.vatNumber = newValue;
			this.MarkAsDirty('VatNumber');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private paymentTermId: string;
	public get PaymentTermId() {
		return this.paymentTermId;
	}
	public set PaymentTermId(newValue: string) {
		if (this.paymentTermId != newValue) {
			this.paymentTermId = newValue;
			this.MarkAsDirty('PaymentTermId');
		}
	}

	private paymentTermName: string;
	public get PaymentTermName() {
		return this.paymentTermName;
	}
	public set PaymentTermName(newValue: string) {
		if (this.paymentTermName != newValue) {
			this.paymentTermName = newValue;
			this.MarkAsDirty('PaymentTermName');
		}
	}

	private isHybrid: boolean;
	public get IsHybrid() {
		return this.isHybrid;
	}
	public set IsHybrid(newValue: boolean) {
		if (this.isHybrid != newValue) {
			this.isHybrid = newValue;
			this.MarkAsDirty('IsHybrid');
		}
	}

	private isQuoteSubjectEdited: boolean;
	public get IsQuoteSubjectEdited() {
		return this.isQuoteSubjectEdited;
	}
	public set IsQuoteSubjectEdited(newValue: boolean) {
		if (this.isQuoteSubjectEdited != newValue) {
			this.isQuoteSubjectEdited = newValue;
			this.MarkAsDirty('IsQuoteSubjectEdited');
		}
	}

	private agentId: string;
	public get AgentId() {
		return this.agentId;
	}
	public set AgentId(newValue: string) {
		if (this.agentId != newValue) {
			this.agentId = newValue;
			this.MarkAsDirty('AgentId');
		}
	}

	private agentName: string;
	public get AgentName() {
		return this.agentName;
	}
	public set AgentName(newValue: string) {
		if (this.agentName != newValue) {
			this.agentName = newValue;
			this.MarkAsDirty('AgentName');
		}
	}

	private defaultQuestionnaireId: string;
	public get DefaultQuestionnaireId() {
		return this.defaultQuestionnaireId;
	}
	public set DefaultQuestionnaireId(newValue: string) {
		if (this.defaultQuestionnaireId != newValue) {
			this.defaultQuestionnaireId = newValue;
			this.MarkAsDirty('DefaultQuestionnaireId');
		}
	}

	private cASSCode: string;
	public get CASSCode() {
		return this.cASSCode;
	}
	public set CASSCode(newValue: string) {
		if (this.cASSCode != newValue) {
			this.cASSCode = newValue;
			this.MarkAsDirty('CASSCode');
		}
	}

	private currencyId: string;
	public get CurrencyId() {
		return this.currencyId;
	}
	public set CurrencyId(newValue: string) {
		if (this.currencyId != newValue) {
			this.currencyId = newValue;
			this.MarkAsDirty('CurrencyId');
		}
	}

	private accountingCurrencyCode: string;
	public get AccountingCurrencyCode() {
		return this.accountingCurrencyCode;
	}
	public set AccountingCurrencyCode(newValue: string) {
		if (this.accountingCurrencyCode != newValue) {
			this.accountingCurrencyCode = newValue;
			this.MarkAsDirty('AccountingCurrencyCode');
		}
	}

	private accountingCurrencyName: string;
	public get AccountingCurrencyName() {
		return this.accountingCurrencyName;
	}
	public set AccountingCurrencyName(newValue: string) {
		if (this.accountingCurrencyName != newValue) {
			this.accountingCurrencyName = newValue;
			this.MarkAsDirty('AccountingCurrencyName');
		}
	}

	private profitCurrencyId: string;
	public get ProfitCurrencyId() {
		return this.profitCurrencyId;
	}
	public set ProfitCurrencyId(newValue: string) {
		if (this.profitCurrencyId != newValue) {
			this.profitCurrencyId = newValue;
			this.MarkAsDirty('ProfitCurrencyId');
		}
	}

	private profitCurrencyCode: string;
	public get ProfitCurrencyCode() {
		return this.profitCurrencyCode;
	}
	public set ProfitCurrencyCode(newValue: string) {
		if (this.profitCurrencyCode != newValue) {
			this.profitCurrencyCode = newValue;
			this.MarkAsDirty('ProfitCurrencyCode');
		}
	}

	private profitCurrencyRate: number;
	public get ProfitCurrencyRate() {
		return this.profitCurrencyRate;
	}
	public set ProfitCurrencyRate(newValue: number) {
		if (this.profitCurrencyRate != newValue) {
			this.profitCurrencyRate = newValue;
			this.MarkAsDirty('ProfitCurrencyRate');
		}
	}

	private freightCurrencyId: string;
	public get FreightCurrencyId() {
		return this.freightCurrencyId;
	}
	public set FreightCurrencyId(newValue: string) {
		if (this.freightCurrencyId != newValue) {
			this.freightCurrencyId = newValue;
			this.MarkAsDirty('FreightCurrencyId');
		}
	}

	private freightCurrencyCode: string;
	public get FreightCurrencyCode() {
		return this.freightCurrencyCode;
	}
	public set FreightCurrencyCode(newValue: string) {
		if (this.freightCurrencyCode != newValue) {
			this.freightCurrencyCode = newValue;
			this.MarkAsDirty('FreightCurrencyCode');
		}
	}

	private otherChargesCurrencyId: string;
	public get OtherChargesCurrencyId() {
		return this.otherChargesCurrencyId;
	}
	public set OtherChargesCurrencyId(newValue: string) {
		if (this.otherChargesCurrencyId != newValue) {
			this.otherChargesCurrencyId = newValue;
			this.MarkAsDirty('OtherChargesCurrencyId');
		}
	}

	private otherChargesCurrencyCode: string;
	public get OtherChargesCurrencyCode() {
		return this.otherChargesCurrencyCode;
	}
	public set OtherChargesCurrencyCode(newValue: string) {
		if (this.otherChargesCurrencyCode != newValue) {
			this.otherChargesCurrencyCode = newValue;
			this.MarkAsDirty('OtherChargesCurrencyCode');
		}
	}

	private quoteSaleCurrencyId: string;
	public get QuoteSaleCurrencyId() {
		return this.quoteSaleCurrencyId;
	}
	public set QuoteSaleCurrencyId(newValue: string) {
		if (this.quoteSaleCurrencyId != newValue) {
			this.quoteSaleCurrencyId = newValue;
			this.MarkAsDirty('QuoteSaleCurrencyId');
		}
	}

	private quoteSaleCurrencyCode: string;
	public get QuoteSaleCurrencyCode() {
		return this.quoteSaleCurrencyCode;
	}
	public set QuoteSaleCurrencyCode(newValue: string) {
		if (this.quoteSaleCurrencyCode != newValue) {
			this.quoteSaleCurrencyCode = newValue;
			this.MarkAsDirty('QuoteSaleCurrencyCode');
		}
	}

	private volumeUnitCode: string;
	public get VolumeUnitCode() {
		return this.volumeUnitCode;
	}
	public set VolumeUnitCode(newValue: string) {
		if (this.volumeUnitCode != newValue) {
			this.volumeUnitCode = newValue;
			this.MarkAsDirty('VolumeUnitCode');
		}
	}

	private dimensionsUnitCode: string;
	public get DimensionsUnitCode() {
		return this.dimensionsUnitCode;
	}
	public set DimensionsUnitCode(newValue: string) {
		if (this.dimensionsUnitCode != newValue) {
			this.dimensionsUnitCode = newValue;
			this.MarkAsDirty('DimensionsUnitCode');
		}
	}

	private grossWeightUnitCode: string;
	public get GrossWeightUnitCode() {
		return this.grossWeightUnitCode;
	}
	public set GrossWeightUnitCode(newValue: string) {
		if (this.grossWeightUnitCode != newValue) {
			this.grossWeightUnitCode = newValue;
			this.MarkAsDirty('GrossWeightUnitCode');
		}
	}

	private chargeableWeightUnitCode: string;
	public get ChargeableWeightUnitCode() {
		return this.chargeableWeightUnitCode;
	}
	public set ChargeableWeightUnitCode(newValue: string) {
		if (this.chargeableWeightUnitCode != newValue) {
			this.chargeableWeightUnitCode = newValue;
			this.MarkAsDirty('ChargeableWeightUnitCode');
		}
	}

	private weightMeasurementUnitCode: string;
	public get WeightMeasurementUnitCode() {
		return this.weightMeasurementUnitCode;
	}
	public set WeightMeasurementUnitCode(newValue: string) {
		if (this.weightMeasurementUnitCode != newValue) {
			this.weightMeasurementUnitCode = newValue;
			this.MarkAsDirty('WeightMeasurementUnitCode');
		}
	}

	private exportFreightPrepaidCollectId: string;
	public get ExportFreightPrepaidCollectId() {
		return this.exportFreightPrepaidCollectId;
	}
	public set ExportFreightPrepaidCollectId(newValue: string) {
		if (this.exportFreightPrepaidCollectId != newValue) {
			this.exportFreightPrepaidCollectId = newValue;
			this.MarkAsDirty('ExportFreightPrepaidCollectId');
		}
	}

	private importFreightPrepaidCollectId: string;
	public get ImportFreightPrepaidCollectId() {
		return this.importFreightPrepaidCollectId;
	}
	public set ImportFreightPrepaidCollectId(newValue: string) {
		if (this.importFreightPrepaidCollectId != newValue) {
			this.importFreightPrepaidCollectId = newValue;
			this.MarkAsDirty('ImportFreightPrepaidCollectId');
		}
	}

	private exportOtherPrepaidCollectId: string;
	public get ExportOtherPrepaidCollectId() {
		return this.exportOtherPrepaidCollectId;
	}
	public set ExportOtherPrepaidCollectId(newValue: string) {
		if (this.exportOtherPrepaidCollectId != newValue) {
			this.exportOtherPrepaidCollectId = newValue;
			this.MarkAsDirty('ExportOtherPrepaidCollectId');
		}
	}

	private importOtherPrepaidCollectId: string;
	public get ImportOtherPrepaidCollectId() {
		return this.importOtherPrepaidCollectId;
	}
	public set ImportOtherPrepaidCollectId(newValue: string) {
		if (this.importOtherPrepaidCollectId != newValue) {
			this.importOtherPrepaidCollectId = newValue;
			this.MarkAsDirty('ImportOtherPrepaidCollectId');
		}
	}

	private masterExportFreightPrepaidCollectId: string;
	public get MasterExportFreightPrepaidCollectId() {
		return this.masterExportFreightPrepaidCollectId;
	}
	public set MasterExportFreightPrepaidCollectId(newValue: string) {
		if (this.masterExportFreightPrepaidCollectId != newValue) {
			this.masterExportFreightPrepaidCollectId = newValue;
			this.MarkAsDirty('MasterExportFreightPrepaidCollectId');
		}
	}

	private masterImportFreightPrepaidCollectId: string;
	public get MasterImportFreightPrepaidCollectId() {
		return this.masterImportFreightPrepaidCollectId;
	}
	public set MasterImportFreightPrepaidCollectId(newValue: string) {
		if (this.masterImportFreightPrepaidCollectId != newValue) {
			this.masterImportFreightPrepaidCollectId = newValue;
			this.MarkAsDirty('MasterImportFreightPrepaidCollectId');
		}
	}

	private masterExportOtherPrepaidCollectId: string;
	public get MasterExportOtherPrepaidCollectId() {
		return this.masterExportOtherPrepaidCollectId;
	}
	public set MasterExportOtherPrepaidCollectId(newValue: string) {
		if (this.masterExportOtherPrepaidCollectId != newValue) {
			this.masterExportOtherPrepaidCollectId = newValue;
			this.MarkAsDirty('MasterExportOtherPrepaidCollectId');
		}
	}

	private masterImportOtherPrepaidCollectId: string;
	public get MasterImportOtherPrepaidCollectId() {
		return this.masterImportOtherPrepaidCollectId;
	}
	public set MasterImportOtherPrepaidCollectId(newValue: string) {
		if (this.masterImportOtherPrepaidCollectId != newValue) {
			this.masterImportOtherPrepaidCollectId = newValue;
			this.MarkAsDirty('MasterImportOtherPrepaidCollectId');
		}
	}

	private sTDVatPercentage: number;
	public get STDVatPercentage() {
		return this.sTDVatPercentage;
	}
	public set STDVatPercentage(newValue: number) {
		if (this.sTDVatPercentage != newValue) {
			this.sTDVatPercentage = newValue;
			this.MarkAsDirty('STDVatPercentage');
		}
	}

	private timeZoneOffset: number;
	public get TimeZoneOffset() {
		return this.timeZoneOffset;
	}
	public set TimeZoneOffset(newValue: number) {
		if (this.timeZoneOffset != newValue) {
			this.timeZoneOffset = newValue;
			this.MarkAsDirty('TimeZoneOffset');
		}
	}

	private language: string;
	public get Language() {
		return this.language;
	}
	public set Language(newValue: string) {
		if (this.language != newValue) {
			this.language = newValue;
			this.MarkAsDirty('Language');
		}
	}

	private dateTimeFormat: string;
	public get DateTimeFormat() {
		return this.dateTimeFormat;
	}
	public set DateTimeFormat(newValue: string) {
		if (this.dateTimeFormat != newValue) {
			this.dateTimeFormat = newValue;
			this.MarkAsDirty('DateTimeFormat');
		}
	}

	private email: string;
	public get Email() {
		return this.email;
	}
	public set Email(newValue: string) {
		if (this.email != newValue) {
			this.email = newValue;
			this.MarkAsDirty('Email');
		}
	}

	private website: string;
	public get Website() {
		return this.website;
	}
	public set Website(newValue: string) {
		if (this.website != newValue) {
			this.website = newValue;
			this.MarkAsDirty('Website');
		}
	}

	private format: string;
	public get Format() {
		return this.format;
	}
	public set Format(newValue: string) {
		if (this.format != newValue) {
			this.format = newValue;
			this.MarkAsDirty('Format');
		}
	}

	private direction: string;
	public get Direction() {
		return this.direction;
	}
	public set Direction(newValue: string) {
		if (this.direction != newValue) {
			this.direction = newValue;
			this.MarkAsDirty('Direction');
		}
	}

	private dayLightOffset: number;
	public get DayLightOffset() {
		return this.dayLightOffset;
	}
	public set DayLightOffset(newValue: number) {
		if (this.dayLightOffset != newValue) {
			this.dayLightOffset = newValue;
			this.MarkAsDirty('DayLightOffset');
		}
	}

	private dayLightStartDate: Date;
	public get DayLightStartDate() {
		return this.dayLightStartDate;
	}
	public set DayLightStartDate(newValue: Date) {
		if (this.dayLightStartDate != newValue) {
			this.dayLightStartDate = newValue;
			this.MarkAsDirty('DayLightStartDate');
		}
	}

	private dayLightEndDate: Date;
	public get DayLightEndDate() {
		return this.dayLightEndDate;
	}
	public set DayLightEndDate(newValue: Date) {
		if (this.dayLightEndDate != newValue) {
			this.dayLightEndDate = newValue;
			this.MarkAsDirty('DayLightEndDate');
		}
	}

	private passwordPolicyCode: string;
	public get PasswordPolicyCode() {
		return this.passwordPolicyCode;
	}
	public set PasswordPolicyCode(newValue: string) {
		if (this.passwordPolicyCode != newValue) {
			this.passwordPolicyCode = newValue;
			this.MarkAsDirty('PasswordPolicyCode');
		}
	}

	private passwordStrength: string;
	public get PasswordStrength() {
		return this.passwordStrength;
	}
	public set PasswordStrength(newValue: string) {
		if (this.passwordStrength != newValue) {
			this.passwordStrength = newValue;
			this.MarkAsDirty('PasswordStrength');
		}
	}

	private isDataBackupBuilt: boolean;
	public get IsDataBackupBuilt() {
		return this.isDataBackupBuilt;
	}
	public set IsDataBackupBuilt(newValue: boolean) {
		if (this.isDataBackupBuilt != newValue) {
			this.isDataBackupBuilt = newValue;
			this.MarkAsDirty('IsDataBackupBuilt');
		}
	}

	private countryCode: string;
	public get CountryCode() {
		return this.countryCode;
	}
	public set CountryCode(newValue: string) {
		if (this.countryCode != newValue) {
			this.countryCode = newValue;
			this.MarkAsDirty('CountryCode');
		}
	}

	private countryName: string;
	public get CountryName() {
		return this.countryName;
	}
	public set CountryName(newValue: string) {
		if (this.countryName != newValue) {
			this.countryName = newValue;
			this.MarkAsDirty('CountryName');
		}
	}

	private packageCode: string;
	public get PackageCode() {
		return this.packageCode;
	}
	public set PackageCode(newValue: string) {
		if (this.packageCode != newValue) {
			this.packageCode = newValue;
			this.MarkAsDirty('PackageCode');
		}
	}

	private temporalPackageCode: string;
	public get TemporalPackageCode() {
		return this.temporalPackageCode;
	}
	public set TemporalPackageCode(newValue: string) {
		if (this.temporalPackageCode != newValue) {
			this.temporalPackageCode = newValue;
			this.MarkAsDirty('TemporalPackageCode');
		}
	}

	private temporalStartDate: Date;
	public get TemporalStartDate() {
		return this.temporalStartDate;
	}
	public set TemporalStartDate(newValue: Date) {
		if (this.temporalStartDate != newValue) {
			this.temporalStartDate = newValue;
			this.MarkAsDirty('TemporalStartDate');
		}
	}

	private temporalEndDate: Date;
	public get TemporalEndDate() {
		return this.temporalEndDate;
	}
	public set TemporalEndDate(newValue: Date) {
		if (this.temporalEndDate != newValue) {
			this.temporalEndDate = newValue;
			this.MarkAsDirty('TemporalEndDate');
		}
	}

	private currencyCode: string;
	public get CurrencyCode() {
		return this.currencyCode;
	}
	public set CurrencyCode(newValue: string) {
		if (this.currencyCode != newValue) {
			this.currencyCode = newValue;
			this.MarkAsDirty('CurrencyCode');
		}
	}

	private invoiceSection1: string;
	public get InvoiceSection1() {
		return this.invoiceSection1;
	}
	public set InvoiceSection1(newValue: string) {
		if (this.invoiceSection1 != newValue) {
			this.invoiceSection1 = newValue;
			this.MarkAsDirty('InvoiceSection1');
		}
	}

	private invoiceSection2: string;
	public get InvoiceSection2() {
		return this.invoiceSection2;
	}
	public set InvoiceSection2(newValue: string) {
		if (this.invoiceSection2 != newValue) {
			this.invoiceSection2 = newValue;
			this.MarkAsDirty('InvoiceSection2');
		}
	}

	private bankDetails: string;
	public get BankDetails() {
		return this.bankDetails;
	}
	public set BankDetails(newValue: string) {
		if (this.bankDetails != newValue) {
			this.bankDetails = newValue;
			this.MarkAsDirty('BankDetails');
		}
	}

	private isSharedLogisticsActivated: boolean;
	public get IsSharedLogisticsActivated() {
		return this.isSharedLogisticsActivated;
	}
	public set IsSharedLogisticsActivated(newValue: boolean) {
		if (this.isSharedLogisticsActivated != newValue) {
			this.isSharedLogisticsActivated = newValue;
			this.MarkAsDirty('IsSharedLogisticsActivated');
		}
	}

	private isWebAccessActivated: boolean;
	public get IsWebAccessActivated() {
		return this.isWebAccessActivated;
	}
	public set IsWebAccessActivated(newValue: boolean) {
		if (this.isWebAccessActivated != newValue) {
			this.isWebAccessActivated = newValue;
			this.MarkAsDirty('IsWebAccessActivated');
		}
	}

	private isMobileActivated: boolean;
	public get IsMobileActivated() {
		return this.isMobileActivated;
	}
	public set IsMobileActivated(newValue: boolean) {
		if (this.isMobileActivated != newValue) {
			this.isMobileActivated = newValue;
			this.MarkAsDirty('IsMobileActivated');
		}
	}

	private sharedLogisticsMessageLink: boolean;
	public get SharedLogisticsMessageLink() {
		return this.sharedLogisticsMessageLink;
	}
	public set SharedLogisticsMessageLink(newValue: boolean) {
		if (this.sharedLogisticsMessageLink != newValue) {
			this.sharedLogisticsMessageLink = newValue;
			this.MarkAsDirty('SharedLogisticsMessageLink');
		}
	}

	private localCustomsCode: string;
	public get LocalCustomsCode() {
		return this.localCustomsCode;
	}
	public set LocalCustomsCode(newValue: string) {
		if (this.localCustomsCode != newValue) {
			this.localCustomsCode = newValue;
			this.MarkAsDirty('LocalCustomsCode');
		}
	}

	private vatUniqueTypeCode: string;
	public get VatUniqueTypeCode() {
		return this.vatUniqueTypeCode;
	}
	public set VatUniqueTypeCode(newValue: string) {
		if (this.vatUniqueTypeCode != newValue) {
			this.vatUniqueTypeCode = newValue;
			this.MarkAsDirty('VatUniqueTypeCode');
		}
	}

	private vatMandatoryTypeCode: string;
	public get VatMandatoryTypeCode() {
		return this.vatMandatoryTypeCode;
	}
	public set VatMandatoryTypeCode(newValue: string) {
		if (this.vatMandatoryTypeCode != newValue) {
			this.vatMandatoryTypeCode = newValue;
			this.MarkAsDirty('VatMandatoryTypeCode');
		}
	}

	private vatUniqueCountryId: string;
	public get VatUniqueCountryId() {
		return this.vatUniqueCountryId;
	}
	public set VatUniqueCountryId(newValue: string) {
		if (this.vatUniqueCountryId != newValue) {
			this.vatUniqueCountryId = newValue;
			this.MarkAsDirty('VatUniqueCountryId');
		}
	}

	private vatMandatoryCountryId: string;
	public get VatMandatoryCountryId() {
		return this.vatMandatoryCountryId;
	}
	public set VatMandatoryCountryId(newValue: string) {
		if (this.vatMandatoryCountryId != newValue) {
			this.vatMandatoryCountryId = newValue;
			this.MarkAsDirty('VatMandatoryCountryId');
		}
	}

	private vatMandatoryForPotentialCustomers: boolean;
	public get VatMandatoryForPotentialCustomers() {
		return this.vatMandatoryForPotentialCustomers;
	}
	public set VatMandatoryForPotentialCustomers(newValue: boolean) {
		if (this.vatMandatoryForPotentialCustomers != newValue) {
			this.vatMandatoryForPotentialCustomers = newValue;
			this.MarkAsDirty('VatMandatoryForPotentialCustomers');
		}
	}

	private isCustomerTelRequired: boolean;
	public get IsCustomerTelRequired() {
		return this.isCustomerTelRequired;
	}
	public set IsCustomerTelRequired(newValue: boolean) {
		if (this.isCustomerTelRequired != newValue) {
			this.isCustomerTelRequired = newValue;
			this.MarkAsDirty('IsCustomerTelRequired');
		}
	}

	private isCustomerFaxRequired: boolean;
	public get IsCustomerFaxRequired() {
		return this.isCustomerFaxRequired;
	}
	public set IsCustomerFaxRequired(newValue: boolean) {
		if (this.isCustomerFaxRequired != newValue) {
			this.isCustomerFaxRequired = newValue;
			this.MarkAsDirty('IsCustomerFaxRequired');
		}
	}

	private isPickDelAdrsRequired: boolean;
	public get IsPickDelAdrsRequired() {
		return this.isPickDelAdrsRequired;
	}
	public set IsPickDelAdrsRequired(newValue: boolean) {
		if (this.isPickDelAdrsRequired != newValue) {
			this.isPickDelAdrsRequired = newValue;
			this.MarkAsDirty('IsPickDelAdrsRequired');
		}
	}

	private isCustomerAddress1Required: boolean;
	public get IsCustomerAddress1Required() {
		return this.isCustomerAddress1Required;
	}
	public set IsCustomerAddress1Required(newValue: boolean) {
		if (this.isCustomerAddress1Required != newValue) {
			this.isCustomerAddress1Required = newValue;
			this.MarkAsDirty('IsCustomerAddress1Required');
		}
	}

	private hasPrimaryContact: boolean;
	public get HasPrimaryContact() {
		return this.hasPrimaryContact;
	}
	public set HasPrimaryContact(newValue: boolean) {
		if (this.hasPrimaryContact != newValue) {
			this.hasPrimaryContact = newValue;
			this.MarkAsDirty('HasPrimaryContact');
		}
	}

	private allowEAWBMoreThanTenPackages: boolean;
	public get AllowEAWBMoreThanTenPackages() {
		return this.allowEAWBMoreThanTenPackages;
	}
	public set AllowEAWBMoreThanTenPackages(newValue: boolean) {
		if (this.allowEAWBMoreThanTenPackages != newValue) {
			this.allowEAWBMoreThanTenPackages = newValue;
			this.MarkAsDirty('AllowEAWBMoreThanTenPackages');
		}
	}

	private regulatedAgentNumber: string;
	public get RegulatedAgentNumber() {
		return this.regulatedAgentNumber;
	}
	public set RegulatedAgentNumber(newValue: string) {
		if (this.regulatedAgentNumber != newValue) {
			this.regulatedAgentNumber = newValue;
			this.MarkAsDirty('RegulatedAgentNumber');
		}
	}

	private regulatedAgentRegimeActivated: boolean;
	public get RegulatedAgentRegimeActivated() {
		return this.regulatedAgentRegimeActivated;
	}
	public set RegulatedAgentRegimeActivated(newValue: boolean) {
		if (this.regulatedAgentRegimeActivated != newValue) {
			this.regulatedAgentRegimeActivated = newValue;
			this.MarkAsDirty('RegulatedAgentRegimeActivated');
		}
	}

	private customerId: string;
	public get CustomerId() {
		return this.customerId;
	}
	public set CustomerId(newValue: string) {
		if (this.customerId != newValue) {
			this.customerId = newValue;
			this.MarkAsDirty('CustomerId');
		}
	}

	private customerName: string;
	public get CustomerName() {
		return this.customerName;
	}
	public set CustomerName(newValue: string) {
		if (this.customerName != newValue) {
			this.customerName = newValue;
			this.MarkAsDirty('CustomerName');
		}
	}

	private customerMobile: string;
	public get CustomerMobile() {
		return this.customerMobile;
	}
	public set CustomerMobile(newValue: string) {
		if (this.customerMobile != newValue) {
			this.customerMobile = newValue;
			this.MarkAsDirty('CustomerMobile');
		}
	}

	private customerPhone: string;
	public get CustomerPhone() {
		return this.customerPhone;
	}
	public set CustomerPhone(newValue: string) {
		if (this.customerPhone != newValue) {
			this.customerPhone = newValue;
			this.MarkAsDirty('CustomerPhone');
		}
	}

	private isDocumentsArchive: boolean;
	public get IsDocumentsArchive() {
		return this.isDocumentsArchive;
	}
	public set IsDocumentsArchive(newValue: boolean) {
		if (this.isDocumentsArchive != newValue) {
			this.isDocumentsArchive = newValue;
			this.MarkAsDirty('IsDocumentsArchive');
		}
	}

	private isCustomerTenantShare: boolean;
	public get IsCustomerTenantShare() {
		return this.isCustomerTenantShare;
	}
	public set IsCustomerTenantShare(newValue: boolean) {
		if (this.isCustomerTenantShare != newValue) {
			this.isCustomerTenantShare = newValue;
			this.MarkAsDirty('IsCustomerTenantShare');
		}
	}

	private customerTenantShareImportFile: boolean;
	public get CustomerTenantShareImportFile() {
		return this.customerTenantShareImportFile;
	}
	public set CustomerTenantShareImportFile(newValue: boolean) {
		if (this.customerTenantShareImportFile != newValue) {
			this.customerTenantShareImportFile = newValue;
			this.MarkAsDirty('CustomerTenantShareImportFile');
		}
	}

	private customerTenantShareExportFile: boolean;
	public get CustomerTenantShareExportFile() {
		return this.customerTenantShareExportFile;
	}
	public set CustomerTenantShareExportFile(newValue: boolean) {
		if (this.customerTenantShareExportFile != newValue) {
			this.customerTenantShareExportFile = newValue;
			this.MarkAsDirty('CustomerTenantShareExportFile');
		}
	}

	private allowAgentInCustomersLOV: boolean;
	public get AllowAgentInCustomersLOV() {
		return this.allowAgentInCustomersLOV;
	}
	public set AllowAgentInCustomersLOV(newValue: boolean) {
		if (this.allowAgentInCustomersLOV != newValue) {
			this.allowAgentInCustomersLOV = newValue;
			this.MarkAsDirty('AllowAgentInCustomersLOV');
		}
	}

	private isPotentialTelRequired: boolean;
	public get IsPotentialTelRequired() {
		return this.isPotentialTelRequired;
	}
	public set IsPotentialTelRequired(newValue: boolean) {
		if (this.isPotentialTelRequired != newValue) {
			this.isPotentialTelRequired = newValue;
			this.MarkAsDirty('IsPotentialTelRequired');
		}
	}

	private isPotentialFaxRequired: boolean;
	public get IsPotentialFaxRequired() {
		return this.isPotentialFaxRequired;
	}
	public set IsPotentialFaxRequired(newValue: boolean) {
		if (this.isPotentialFaxRequired != newValue) {
			this.isPotentialFaxRequired = newValue;
			this.MarkAsDirty('IsPotentialFaxRequired');
		}
	}

	private vatFormatTypeCode: string;
	public get VatFormatTypeCode() {
		return this.vatFormatTypeCode;
	}
	public set VatFormatTypeCode(newValue: string) {
		if (this.vatFormatTypeCode != newValue) {
			this.vatFormatTypeCode = newValue;
			this.MarkAsDirty('VatFormatTypeCode');
		}
	}

	private vatFormatCountryId: string;
	public get VatFormatCountryId() {
		return this.vatFormatCountryId;
	}
	public set VatFormatCountryId(newValue: string) {
		if (this.vatFormatCountryId != newValue) {
			this.vatFormatCountryId = newValue;
			this.MarkAsDirty('VatFormatCountryId');
		}
	}

	private isNumeric: boolean;
	public get IsNumeric() {
		return this.isNumeric;
	}
	public set IsNumeric(newValue: boolean) {
		if (this.isNumeric != newValue) {
			this.isNumeric = newValue;
			this.MarkAsDirty('IsNumeric');
		}
	}

	private vatSize: number;
	public get VatSize() {
		return this.vatSize;
	}
	public set VatSize(newValue: number) {
		if (this.vatSize != newValue) {
			this.vatSize = newValue;
			this.MarkAsDirty('VatSize');
		}
	}

	private logBoxAdminUserId: string;
	public get LogBoxAdminUserId() {
		return this.logBoxAdminUserId;
	}
	public set LogBoxAdminUserId(newValue: string) {
		if (this.logBoxAdminUserId != newValue) {
			this.logBoxAdminUserId = newValue;
			this.MarkAsDirty('LogBoxAdminUserId');
		}
	}

	private createTenantFromSignUp: boolean;
	public get CreateTenantFromSignUp() {
		return this.createTenantFromSignUp;
	}
	public set CreateTenantFromSignUp(newValue: boolean) {
		if (this.createTenantFromSignUp != newValue) {
			this.createTenantFromSignUp = newValue;
			this.MarkAsDirty('CreateTenantFromSignUp');
		}
	}

	private isCorrespondenceRightToLeftEnabled: boolean;
	public get IsCorrespondenceRightToLeftEnabled() {
		return this.isCorrespondenceRightToLeftEnabled;
	}
	public set IsCorrespondenceRightToLeftEnabled(newValue: boolean) {
		if (this.isCorrespondenceRightToLeftEnabled != newValue) {
			this.isCorrespondenceRightToLeftEnabled = newValue;
			this.MarkAsDirty('IsCorrespondenceRightToLeftEnabled');
		}
	}

	private isNotesRightToLeftEnabled: boolean;
	public get IsNotesRightToLeftEnabled() {
		return this.isNotesRightToLeftEnabled;
	}
	public set IsNotesRightToLeftEnabled(newValue: boolean) {
		if (this.isNotesRightToLeftEnabled != newValue) {
			this.isNotesRightToLeftEnabled = newValue;
			this.MarkAsDirty('IsNotesRightToLeftEnabled');
		}
	}

	private accountingActivationDate: Date;
	public get AccountingActivationDate() {
		return this.accountingActivationDate;
	}
	public set AccountingActivationDate(newValue: Date) {
		if (this.accountingActivationDate != newValue) {
			this.accountingActivationDate = newValue;
			this.MarkAsDirty('AccountingActivationDate');
		}
	}

	private accountingActivated: boolean;
	public get AccountingActivated() {
		return this.accountingActivated;
	}
	public set AccountingActivated(newValue: boolean) {
		if (this.accountingActivated != newValue) {
			this.accountingActivated = newValue;
			this.MarkAsDirty('AccountingActivated');
		}
	}

	private currencySign: string;
	public get CurrencySign() {
		return this.currencySign;
	}
	public set CurrencySign(newValue: string) {
		if (this.currencySign != newValue) {
			this.currencySign = newValue;
			this.MarkAsDirty('CurrencySign');
		}
	}

	private privateLabelId: string;
	public get PrivateLabelId() {
		return this.privateLabelId;
	}
	public set PrivateLabelId(newValue: string) {
		if (this.privateLabelId != newValue) {
			this.privateLabelId = newValue;
			this.MarkAsDirty('PrivateLabelId');
		}
	}

	private isInternalTicketByDefault: boolean;
	public get IsInternalTicketByDefault() {
		return this.isInternalTicketByDefault;
	}
	public set IsInternalTicketByDefault(newValue: boolean) {
		if (this.isInternalTicketByDefault != newValue) {
			this.isInternalTicketByDefault = newValue;
			this.MarkAsDirty('IsInternalTicketByDefault');
		}
	}

	private prorateMasterReceivables: boolean;
	public get ProrateMasterReceivables() {
		return this.prorateMasterReceivables;
	}
	public set ProrateMasterReceivables(newValue: boolean) {
		if (this.prorateMasterReceivables != newValue) {
			this.prorateMasterReceivables = newValue;
			this.MarkAsDirty('ProrateMasterReceivables');
		}
	}

	private exportQuotationsToIntegratedSystem: boolean;
	public get ExportQuotationsToIntegratedSystem() {
		return this.exportQuotationsToIntegratedSystem;
	}
	public set ExportQuotationsToIntegratedSystem(newValue: boolean) {
		if (this.exportQuotationsToIntegratedSystem != newValue) {
			this.exportQuotationsToIntegratedSystem = newValue;
			this.MarkAsDirty('ExportQuotationsToIntegratedSystem');
		}
	}

	private isIncrementalBuildRunning: boolean;
	public get IsIncrementalBuildRunning() {
		return this.isIncrementalBuildRunning;
	}
	public set IsIncrementalBuildRunning(newValue: boolean) {
		if (this.isIncrementalBuildRunning != newValue) {
			this.isIncrementalBuildRunning = newValue;
			this.MarkAsDirty('IsIncrementalBuildRunning');
		}
	}

	private sCACCode: string;
	public get SCACCode() {
		return this.sCACCode;
	}
	public set SCACCode(newValue: string) {
		if (this.sCACCode != newValue) {
			this.sCACCode = newValue;
			this.MarkAsDirty('SCACCode');
		}
	}

	private fMCNumber: string;
	public get FMCNumber() {
		return this.fMCNumber;
	}
	public set FMCNumber(newValue: string) {
		if (this.fMCNumber != newValue) {
			this.fMCNumber = newValue;
			this.MarkAsDirty('FMCNumber');
		}
	}

	private tenantVATManagement: boolean;
	public get TenantVATManagement() {
		return this.tenantVATManagement;
	}
	public set TenantVATManagement(newValue: boolean) {
		if (this.tenantVATManagement != newValue) {
			this.tenantVATManagement = newValue;
			this.MarkAsDirty('TenantVATManagement');
		}
	}

	private documentShareAsDefault: boolean;
	public get DocumentShareAsDefault() {
		return this.documentShareAsDefault;
	}
	public set DocumentShareAsDefault(newValue: boolean) {
		if (this.documentShareAsDefault != newValue) {
			this.documentShareAsDefault = newValue;
			this.MarkAsDirty('DocumentShareAsDefault');
		}
	}

	private storageEncryptionKey: string;
	public get StorageEncryptionKey() {
		return this.storageEncryptionKey;
	}
	public set StorageEncryptionKey(newValue: string) {
		if (this.storageEncryptionKey != newValue) {
			this.storageEncryptionKey = newValue;
			this.MarkAsDirty('StorageEncryptionKey');
		}
	}

	private layoutDirection: string;
	public get LayoutDirection() {
		return this.layoutDirection;
	}
	public set LayoutDirection(newValue: string) {
		if (this.layoutDirection != newValue) {
			this.layoutDirection = newValue;
			this.MarkAsDirty('LayoutDirection');
		}
	}

	private temperatureUnitCode: string;
	public get TemperatureUnitCode() {
		return this.temperatureUnitCode;
	}
	public set TemperatureUnitCode(newValue: string) {
		if (this.temperatureUnitCode != newValue) {
			this.temperatureUnitCode = newValue;
			this.MarkAsDirty('TemperatureUnitCode');
		}
	}

	private numberFormatCode: string;
	public get NumberFormatCode() {
		return this.numberFormatCode;
	}
	public set NumberFormatCode(newValue: string) {
		if (this.numberFormatCode != newValue) {
			this.numberFormatCode = newValue;
			this.MarkAsDirty('NumberFormatCode');
		}
	}

	private defaultSLAId: string;
	public get DefaultSLAId() {
		return this.defaultSLAId;
	}
	public set DefaultSLAId(newValue: string) {
		if (this.defaultSLAId != newValue) {
			this.defaultSLAId = newValue;
			this.MarkAsDirty('DefaultSLAId');
		}
	}

	private stockTypeCode: string;
	public get StockTypeCode() {
		return this.stockTypeCode;
	}
	public set StockTypeCode(newValue: string) {
		if (this.stockTypeCode != newValue) {
			this.stockTypeCode = newValue;
			this.MarkAsDirty('StockTypeCode');
		}
	}

	private autoArchiveOnInvoice: boolean;
	public get AutoArchiveOnInvoice() {
		return this.autoArchiveOnInvoice;
	}
	public set AutoArchiveOnInvoice(newValue: boolean) {
		if (this.autoArchiveOnInvoice != newValue) {
			this.autoArchiveOnInvoice = newValue;
			this.MarkAsDirty('AutoArchiveOnInvoice');
		}
	}

	private ecommerceSupportEmail: string;
	public get EcommerceSupportEmail() {
		return this.ecommerceSupportEmail;
	}
	public set EcommerceSupportEmail(newValue: string) {
		if (this.ecommerceSupportEmail != newValue) {
			this.ecommerceSupportEmail = newValue;
			this.MarkAsDirty('EcommerceSupportEmail');
		}
	}

	private cBSA: string;
	public get CBSA() {
		return this.cBSA;
	}
	public set CBSA(newValue: string) {
		if (this.cBSA != newValue) {
			this.cBSA = newValue;
			this.MarkAsDirty('CBSA');
		}
	}

	private cAAT: string;
	public get CAAT() {
		return this.cAAT;
	}
	public set CAAT(newValue: string) {
		if (this.cAAT != newValue) {
			this.cAAT = newValue;
			this.MarkAsDirty('CAAT');
		}
	}

	private isTestTenant: boolean;
	public get IsTestTenant() {
		return this.isTestTenant;
	}
	public set IsTestTenant(newValue: boolean) {
		if (this.isTestTenant != newValue) {
			this.isTestTenant = newValue;
			this.MarkAsDirty('IsTestTenant');
		}
	}

	private checkDigitControlAlgorithmCode: string;
	public get CheckDigitControlAlgorithmCode() {
		return this.checkDigitControlAlgorithmCode;
	}
	public set CheckDigitControlAlgorithmCode(newValue: string) {
		if (this.checkDigitControlAlgorithmCode != newValue) {
			this.checkDigitControlAlgorithmCode = newValue;
			this.MarkAsDirty('CheckDigitControlAlgorithmCode');
		}
	}

	private applyVATForAllPartners: boolean;
	public get ApplyVATForAllPartners() {
		return this.applyVATForAllPartners;
	}
	public set ApplyVATForAllPartners(newValue: boolean) {
		if (this.applyVATForAllPartners != newValue) {
			this.applyVATForAllPartners = newValue;
			this.MarkAsDirty('ApplyVATForAllPartners');
		}
	}

	private hideFCLAllIn: boolean;
	public get HideFCLAllIn() {
		return this.hideFCLAllIn;
	}
	public set HideFCLAllIn(newValue: boolean) {
		if (this.hideFCLAllIn != newValue) {
			this.hideFCLAllIn = newValue;
			this.MarkAsDirty('HideFCLAllIn');
		}
	}

	private allowCustomersInAgentsLOV: boolean;
	public get AllowCustomersInAgentsLOV() {
		return this.allowCustomersInAgentsLOV;
	}
	public set AllowCustomersInAgentsLOV(newValue: boolean) {
		if (this.allowCustomersInAgentsLOV != newValue) {
			this.allowCustomersInAgentsLOV = newValue;
			this.MarkAsDirty('AllowCustomersInAgentsLOV');
		}
	}

	private displayDocumentsAndEvents: boolean;
	public get DisplayDocumentsAndEvents() {
		return this.displayDocumentsAndEvents;
	}
	public set DisplayDocumentsAndEvents(newValue: boolean) {
		if (this.displayDocumentsAndEvents != newValue) {
			this.displayDocumentsAndEvents = newValue;
			this.MarkAsDirty('DisplayDocumentsAndEvents');
		}
	}

	private showTaxAmountWarning: boolean;
	public get ShowTaxAmountWarning() {
		return this.showTaxAmountWarning;
	}
	public set ShowTaxAmountWarning(newValue: boolean) {
		if (this.showTaxAmountWarning != newValue) {
			this.showTaxAmountWarning = newValue;
			this.MarkAsDirty('ShowTaxAmountWarning');
		}
	}

	private vatUniquePartnerTypeCode: string;
	public get VatUniquePartnerTypeCode() {
		return this.vatUniquePartnerTypeCode;
	}
	public set VatUniquePartnerTypeCode(newValue: string) {
		if (this.vatUniquePartnerTypeCode != newValue) {
			this.vatUniquePartnerTypeCode = newValue;
			this.MarkAsDirty('VatUniquePartnerTypeCode');
		}
	}

	private transferQuotationsToUnifreightTrigger: string;
	public get TransferQuotationsToUnifreightTrigger() {
		return this.transferQuotationsToUnifreightTrigger;
	}
	public set TransferQuotationsToUnifreightTrigger(newValue: string) {
		if (this.transferQuotationsToUnifreightTrigger != newValue) {
			this.transferQuotationsToUnifreightTrigger = newValue;
			this.MarkAsDirty('TransferQuotationsToUnifreightTrigger');
		}
	}

	private sharedLogisMasterMessageLink: boolean;
	public get SharedLogisMasterMessageLink() {
		return this.sharedLogisMasterMessageLink;
	}
	public set SharedLogisMasterMessageLink(newValue: boolean) {
		if (this.sharedLogisMasterMessageLink != newValue) {
			this.sharedLogisMasterMessageLink = newValue;
			this.MarkAsDirty('SharedLogisMasterMessageLink');
		}
	}

	private airRatio: number;
	public get AirRatio() {
		return this.airRatio;
	}
	public set AirRatio(newValue: number) {
		if (this.airRatio != newValue) {
			this.airRatio = newValue;
			this.MarkAsDirty('AirRatio');
		}
	}

	private lCLRatio: number;
	public get LCLRatio() {
		return this.lCLRatio;
	}
	public set LCLRatio(newValue: number) {
		if (this.lCLRatio != newValue) {
			this.lCLRatio = newValue;
			this.MarkAsDirty('LCLRatio');
		}
	}

	private fCLRatio: number;
	public get FCLRatio() {
		return this.fCLRatio;
	}
	public set FCLRatio(newValue: number) {
		if (this.fCLRatio != newValue) {
			this.fCLRatio = newValue;
			this.MarkAsDirty('FCLRatio');
		}
	}

	private lTLRatio: number;
	public get LTLRatio() {
		return this.lTLRatio;
	}
	public set LTLRatio(newValue: number) {
		if (this.lTLRatio != newValue) {
			this.lTLRatio = newValue;
			this.MarkAsDirty('LTLRatio');
		}
	}

	private fTLRatio: number;
	public get FTLRatio() {
		return this.fTLRatio;
	}
	public set FTLRatio(newValue: number) {
		if (this.fTLRatio != newValue) {
			this.fTLRatio = newValue;
			this.MarkAsDirty('FTLRatio');
		}
	}

	private isQuotesRequestActivatedInShared: boolean;
	public get IsQuotesRequestActivatedInShared() {
		return this.isQuotesRequestActivatedInShared;
	}
	public set IsQuotesRequestActivatedInShared(newValue: boolean) {
		if (this.isQuotesRequestActivatedInShared != newValue) {
			this.isQuotesRequestActivatedInShared = newValue;
			this.MarkAsDirty('IsQuotesRequestActivatedInShared');
		}
	}

	public OldEntityPM: TenantPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				// this.PropertyChanged.emit(new PropertyChangedArgs(propertyName,this));
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'Tenant');
			}
		}
	}
	private MyClone: TenantPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
