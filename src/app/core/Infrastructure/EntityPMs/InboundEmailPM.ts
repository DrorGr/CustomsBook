//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { InboundEmailLinePM } from './InboundEmailLinePM';

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class InboundEmailPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private entityId: string;
	public get EntityId() {
		return this.entityId;
	}
	public set EntityId(newValue: string) {
		if (this.entityId != newValue) {
			this.entityId = newValue;
			this.MarkAsDirty('EntityId');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private updateDate: Date;
	public get UpdateDate() {
		return this.updateDate;
	}
	public set UpdateDate(newValue: Date) {
		if (this.updateDate != newValue) {
			this.updateDate = newValue;
			this.MarkAsDirty('UpdateDate');
		}
	}

	private uniquekey: string;
	public get Uniquekey() {
		return this.uniquekey;
	}
	public set Uniquekey(newValue: string) {
		if (this.uniquekey != newValue) {
			this.uniquekey = newValue;
			this.MarkAsDirty('Uniquekey');
		}
	}

	private objectTableId: string;
	public get ObjectTableId() {
		return this.objectTableId;
	}
	public set ObjectTableId(newValue: string) {
		if (this.objectTableId != newValue) {
			this.objectTableId = newValue;
			this.MarkAsDirty('ObjectTableId');
		}
	}

	private createdByContactId: string;
	public get CreatedByContactId() {
		return this.createdByContactId;
	}
	public set CreatedByContactId(newValue: string) {
		if (this.createdByContactId != newValue) {
			this.createdByContactId = newValue;
			this.MarkAsDirty('CreatedByContactId');
		}
	}

	private inboundEmailLines: InboundEmailLinePM[];
	get InboundEmailLines() {
		if (this.inboundEmailLines == null) {
			this.inboundEmailLines = [];
		}

		return this.inboundEmailLines;
	}
	set InboundEmailLines(newValue: InboundEmailLinePM[]) {
		if (this.inboundEmailLines != newValue) {
			this.inboundEmailLines = newValue;
		}
	}
	public AddInboundEmailLinePM(item: InboundEmailLinePM) {
		if (item != null) {
			var index = this.InboundEmailLines.indexOf(item);
			if (index == -1) {
				item.EntityParentPM = this;

				this.InboundEmailLines.push(item);
				this.MarkAsDirty();
			}
		}
	}
	public RemoveInboundEmailLinePM(item: InboundEmailLinePM) {
		if (item != null) {
			var index = this.InboundEmailLines.indexOf(item);
			if (index > -1) {
				this.InboundEmailLines.splice(index, 1);
				this.MarkAsDirty();
			}
		}
	}
	//public InboundEmailLines: Array<InboundEmailLinePMPM>= [];
	private objectTableName: string;
	public get ObjectTableName() {
		return this.objectTableName;
	}
	public set ObjectTableName(newValue: string) {
		if (this.objectTableName != newValue) {
			this.objectTableName = newValue;
			this.MarkAsDirty('ObjectTableName');
		}
	}

	private isRejected: boolean;
	public get IsRejected() {
		return this.isRejected;
	}
	public set IsRejected(newValue: boolean) {
		if (this.isRejected != newValue) {
			this.isRejected = newValue;
			this.MarkAsDirty('IsRejected');
		}
	}

	private analyzeQueueId: string;
	public get AnalyzeQueueId() {
		return this.analyzeQueueId;
	}
	public set AnalyzeQueueId(newValue: string) {
		if (this.analyzeQueueId != newValue) {
			this.analyzeQueueId = newValue;
			this.MarkAsDirty('AnalyzeQueueId');
		}
	}

	public OldEntityPM: InboundEmailPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'InboundEmail');
			}
		}
	}
	private MyClone: InboundEmailPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
