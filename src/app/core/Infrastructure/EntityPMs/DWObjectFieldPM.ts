//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class DWObjectFieldPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private name: string;
	public get Name() {
		return this.name;
	}
	public set Name(newValue: string) {
		if (this.name != newValue) {
			this.name = newValue;
			this.MarkAsDirty('Name');
		}
	}

	private code: string;
	public get Code() {
		return this.code;
	}
	public set Code(newValue: string) {
		if (this.code != newValue) {
			this.code = newValue;
			this.MarkAsDirty('Code');
		}
	}

	private dWObjectTableCode: string;
	public get DWObjectTableCode() {
		return this.dWObjectTableCode;
	}
	public set DWObjectTableCode(newValue: string) {
		if (this.dWObjectTableCode != newValue) {
			this.dWObjectTableCode = newValue;
			this.MarkAsDirty('DWObjectTableCode');
		}
	}

	private dataTypeCode: string;
	public get DataTypeCode() {
		return this.dataTypeCode;
	}
	public set DataTypeCode(newValue: string) {
		if (this.dataTypeCode != newValue) {
			this.dataTypeCode = newValue;
			this.MarkAsDirty('DataTypeCode');
		}
	}

	private dimensionTableCode: string;
	public get DimensionTableCode() {
		return this.dimensionTableCode;
	}
	public set DimensionTableCode(newValue: string) {
		if (this.dimensionTableCode != newValue) {
			this.dimensionTableCode = newValue;
			this.MarkAsDirty('DimensionTableCode');
		}
	}

	private maxLength: number;
	public get MaxLength() {
		return this.maxLength;
	}
	public set MaxLength(newValue: number) {
		if (this.maxLength != newValue) {
			this.maxLength = newValue;
			this.MarkAsDirty('MaxLength');
		}
	}

	private minLength: number;
	public get MinLength() {
		return this.minLength;
	}
	public set MinLength(newValue: number) {
		if (this.minLength != newValue) {
			this.minLength = newValue;
			this.MarkAsDirty('MinLength');
		}
	}

	private isRequiered: boolean;
	public get IsRequiered() {
		return this.isRequiered;
	}
	public set IsRequiered(newValue: boolean) {
		if (this.isRequiered != newValue) {
			this.isRequiered = newValue;
			this.MarkAsDirty('IsRequiered');
		}
	}

	private isPrimaryKey: boolean;
	public get IsPrimaryKey() {
		return this.isPrimaryKey;
	}
	public set IsPrimaryKey(newValue: boolean) {
		if (this.isPrimaryKey != newValue) {
			this.isPrimaryKey = newValue;
			this.MarkAsDirty('IsPrimaryKey');
		}
	}

	private isMeasurement: boolean;
	public get IsMeasurement() {
		return this.isMeasurement;
	}
	public set IsMeasurement(newValue: boolean) {
		if (this.isMeasurement != newValue) {
			this.isMeasurement = newValue;
			this.MarkAsDirty('IsMeasurement');
		}
	}

	private aggregationTypeCode: string;
	public get AggregationTypeCode() {
		return this.aggregationTypeCode;
	}
	public set AggregationTypeCode(newValue: string) {
		if (this.aggregationTypeCode != newValue) {
			this.aggregationTypeCode = newValue;
			this.MarkAsDirty('AggregationTypeCode');
		}
	}

	private displayInQueryBuilder: boolean;
	public get DisplayInQueryBuilder() {
		return this.displayInQueryBuilder;
	}
	public set DisplayInQueryBuilder(newValue: boolean) {
		if (this.displayInQueryBuilder != newValue) {
			this.displayInQueryBuilder = newValue;
			this.MarkAsDirty('DisplayInQueryBuilder');
		}
	}

	private displayName: string;
	public get DisplayName() {
		return this.displayName;
	}
	public set DisplayName(newValue: string) {
		if (this.displayName != newValue) {
			this.displayName = newValue;
			this.MarkAsDirty('DisplayName');
		}
	}

	private category1: string;
	public get Category1() {
		return this.category1;
	}
	public set Category1(newValue: string) {
		if (this.category1 != newValue) {
			this.category1 = newValue;
			this.MarkAsDirty('Category1');
		}
	}

	private category2: string;
	public get Category2() {
		return this.category2;
	}
	public set Category2(newValue: string) {
		if (this.category2 != newValue) {
			this.category2 = newValue;
			this.MarkAsDirty('Category2');
		}
	}

	private lOVAdditionalColumns: string;
	public get LOVAdditionalColumns() {
		return this.lOVAdditionalColumns;
	}
	public set LOVAdditionalColumns(newValue: string) {
		if (this.lOVAdditionalColumns != newValue) {
			this.lOVAdditionalColumns = newValue;
			this.MarkAsDirty('LOVAdditionalColumns');
		}
	}

	private category: string;
	public get Category() {
		return this.category;
	}
	public set Category(newValue: string) {
		if (this.category != newValue) {
			this.category = newValue;
			this.MarkAsDirty('Category');
		}
	}

	private categoryIndex: number;
	public get CategoryIndex() {
		return this.categoryIndex;
	}
	public set CategoryIndex(newValue: number) {
		if (this.categoryIndex != newValue) {
			this.categoryIndex = newValue;
			this.MarkAsDirty('CategoryIndex');
		}
	}

	private hideTree: boolean;
	public get HideTree() {
		return this.hideTree;
	}
	public set HideTree(newValue: boolean) {
		if (this.hideTree != newValue) {
			this.hideTree = newValue;
			this.MarkAsDirty('HideTree');
		}
	}

	private dimensionTableDisplayName: string;
	public get DimensionTableDisplayName() {
		return this.dimensionTableDisplayName;
	}
	public set DimensionTableDisplayName(newValue: string) {
		if (this.dimensionTableDisplayName != newValue) {
			this.dimensionTableDisplayName = newValue;
			this.MarkAsDirty('DimensionTableDisplayName');
		}
	}

	private cannotFilter: boolean;
	public get CannotFilter() {
		return this.cannotFilter;
	}
	public set CannotFilter(newValue: boolean) {
		if (this.cannotFilter != newValue) {
			this.cannotFilter = newValue;
			this.MarkAsDirty('CannotFilter');
		}
	}

	private helpText: string;
	public get HelpText() {
		return this.helpText;
	}
	public set HelpText(newValue: string) {
		if (this.helpText != newValue) {
			this.helpText = newValue;
			this.MarkAsDirty('HelpText');
		}
	}

	private isCustom: boolean;
	public get IsCustom() {
		return this.isCustom;
	}
	public set IsCustom(newValue: boolean) {
		if (this.isCustom != newValue) {
			this.isCustom = newValue;
			this.MarkAsDirty('IsCustom');
		}
	}

	private customPickListCode: string;
	public get CustomPickListCode() {
		return this.customPickListCode;
	}
	public set CustomPickListCode(newValue: string) {
		if (this.customPickListCode != newValue) {
			this.customPickListCode = newValue;
			this.MarkAsDirty('CustomPickListCode');
		}
	}

	private originalObjectFieldCode: string;
	public get OriginalObjectFieldCode() {
		return this.originalObjectFieldCode;
	}
	public set OriginalObjectFieldCode(newValue: string) {
		if (this.originalObjectFieldCode != newValue) {
			this.originalObjectFieldCode = newValue;
			this.MarkAsDirty('OriginalObjectFieldCode');
		}
	}

	private fullNameTextCodeCode: string;
	public get FullNameTextCodeCode() {
		return this.fullNameTextCodeCode;
	}
	public set FullNameTextCodeCode(newValue: string) {
		if (this.fullNameTextCodeCode != newValue) {
			this.fullNameTextCodeCode = newValue;
			this.MarkAsDirty('FullNameTextCodeCode');
		}
	}

	private partnerFullNameTextCodeCode: string;
	public get PartnerFullNameTextCodeCode() {
		return this.partnerFullNameTextCodeCode;
	}
	public set PartnerFullNameTextCodeCode(newValue: string) {
		if (this.partnerFullNameTextCodeCode != newValue) {
			this.partnerFullNameTextCodeCode = newValue;
			this.MarkAsDirty('PartnerFullNameTextCodeCode');
		}
	}

	private partnerOriginalObjectFieldCode: string;
	public get PartnerOriginalObjectFieldCode() {
		return this.partnerOriginalObjectFieldCode;
	}
	public set PartnerOriginalObjectFieldCode(newValue: string) {
		if (this.partnerOriginalObjectFieldCode != newValue) {
			this.partnerOriginalObjectFieldCode = newValue;
			this.MarkAsDirty('PartnerOriginalObjectFieldCode');
		}
	}

	private viewFieldDisplayName: string;
	public get ViewFieldDisplayName() {
		return this.viewFieldDisplayName;
	}
	public set ViewFieldDisplayName(newValue: string) {
		if (this.viewFieldDisplayName != newValue) {
			this.viewFieldDisplayName = newValue;
			this.MarkAsDirty('ViewFieldDisplayName');
		}
	}

	private dontDisplayInView: boolean;
	public get DontDisplayInView() {
		return this.dontDisplayInView;
	}
	public set DontDisplayInView(newValue: boolean) {
		if (this.dontDisplayInView != newValue) {
			this.dontDisplayInView = newValue;
			this.MarkAsDirty('DontDisplayInView');
		}
	}

	private dimensionDataViewName: string;
	public get DimensionDataViewName() {
		return this.dimensionDataViewName;
	}
	public set DimensionDataViewName(newValue: string) {
		if (this.dimensionDataViewName != newValue) {
			this.dimensionDataViewName = newValue;
			this.MarkAsDirty('DimensionDataViewName');
		}
	}

	private isMultipleSelection: boolean;
	public get IsMultipleSelection() {
		return this.isMultipleSelection;
	}
	public set IsMultipleSelection(newValue: boolean) {
		if (this.isMultipleSelection != newValue) {
			this.isMultipleSelection = newValue;
			this.MarkAsDirty('IsMultipleSelection');
		}
	}

	private recordType: string;
	public get RecordType() {
		return this.recordType;
	}
	public set RecordType(newValue: string) {
		if (this.recordType != newValue) {
			this.recordType = newValue;
			this.MarkAsDirty('RecordType');
		}
	}

	private factTableCode: string;
	public get FactTableCode() {
		return this.factTableCode;
	}
	public set FactTableCode(newValue: string) {
		if (this.factTableCode != newValue) {
			this.factTableCode = newValue;
			this.MarkAsDirty('FactTableCode');
		}
	}

	public OldEntityPM: DWObjectFieldPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'DWObjectField');
			}
		}
	}
	private MyClone: DWObjectFieldPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
