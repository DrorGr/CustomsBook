//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class LogitudeLeadPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private phoneNumber: string;
	public get PhoneNumber() {
		return this.phoneNumber;
	}
	public set PhoneNumber(newValue: string) {
		if (this.phoneNumber != newValue) {
			this.phoneNumber = newValue;
			this.MarkAsDirty('PhoneNumber');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private companyName: string;
	public get CompanyName() {
		return this.companyName;
	}
	public set CompanyName(newValue: string) {
		if (this.companyName != newValue) {
			this.companyName = newValue;
			this.MarkAsDirty('CompanyName');
		}
	}

	private contactName: string;
	public get ContactName() {
		return this.contactName;
	}
	public set ContactName(newValue: string) {
		if (this.contactName != newValue) {
			this.contactName = newValue;
			this.MarkAsDirty('ContactName');
		}
	}

	private numberOfBranches: number;
	public get NumberOfBranches() {
		return this.numberOfBranches;
	}
	public set NumberOfBranches(newValue: number) {
		if (this.numberOfBranches != newValue) {
			this.numberOfBranches = newValue;
			this.MarkAsDirty('NumberOfBranches');
		}
	}

	private country: string;
	public get Country() {
		return this.country;
	}
	public set Country(newValue: string) {
		if (this.country != newValue) {
			this.country = newValue;
			this.MarkAsDirty('Country');
		}
	}

	private email: string;
	public get Email() {
		return this.email;
	}
	public set Email(newValue: string) {
		if (this.email != newValue) {
			this.email = newValue;
			this.MarkAsDirty('Email');
		}
	}

	private numberOfUsers: number;
	public get NumberOfUsers() {
		return this.numberOfUsers;
	}
	public set NumberOfUsers(newValue: number) {
		if (this.numberOfUsers != newValue) {
			this.numberOfUsers = newValue;
			this.MarkAsDirty('NumberOfUsers');
		}
	}

	private comments: string;
	public get Comments() {
		return this.comments;
	}
	public set Comments(newValue: string) {
		if (this.comments != newValue) {
			this.comments = newValue;
			this.MarkAsDirty('Comments');
		}
	}

	private leadSource: string;
	public get LeadSource() {
		return this.leadSource;
	}
	public set LeadSource(newValue: string) {
		if (this.leadSource != newValue) {
			this.leadSource = newValue;
			this.MarkAsDirty('LeadSource');
		}
	}

	private iATACode: string;
	public get IATACode() {
		return this.iATACode;
	}
	public set IATACode(newValue: string) {
		if (this.iATACode != newValue) {
			this.iATACode = newValue;
			this.MarkAsDirty('IATACode');
		}
	}

	private cASSCode: string;
	public get CASSCode() {
		return this.cASSCode;
	}
	public set CASSCode(newValue: string) {
		if (this.cASSCode != newValue) {
			this.cASSCode = newValue;
			this.MarkAsDirty('CASSCode');
		}
	}

	private packageCode: string;
	public get PackageCode() {
		return this.packageCode;
	}
	public set PackageCode(newValue: string) {
		if (this.packageCode != newValue) {
			this.packageCode = newValue;
			this.MarkAsDirty('PackageCode');
		}
	}

	private requestType: string;
	public get RequestType() {
		return this.requestType;
	}
	public set RequestType(newValue: string) {
		if (this.requestType != newValue) {
			this.requestType = newValue;
			this.MarkAsDirty('RequestType');
		}
	}

	private isEmailVerified: boolean;
	public get IsEmailVerified() {
		return this.isEmailVerified;
	}
	public set IsEmailVerified(newValue: boolean) {
		if (this.isEmailVerified != newValue) {
			this.isEmailVerified = newValue;
			this.MarkAsDirty('IsEmailVerified');
		}
	}

	private tenantNumber: number;
	public get TenantNumber() {
		return this.tenantNumber;
	}
	public set TenantNumber(newValue: number) {
		if (this.tenantNumber != newValue) {
			this.tenantNumber = newValue;
			this.MarkAsDirty('TenantNumber');
		}
	}

	private lastUpdateDate: Date;
	public get LastUpdateDate() {
		return this.lastUpdateDate;
	}
	public set LastUpdateDate(newValue: Date) {
		if (this.lastUpdateDate != newValue) {
			this.lastUpdateDate = newValue;
			this.MarkAsDirty('LastUpdateDate');
		}
	}

	private isSentToCustomer: boolean;
	public get IsSentToCustomer() {
		return this.isSentToCustomer;
	}
	public set IsSentToCustomer(newValue: boolean) {
		if (this.isSentToCustomer != newValue) {
			this.isSentToCustomer = newValue;
			this.MarkAsDirty('IsSentToCustomer');
		}
	}

	private statusCode: string;
	public get StatusCode() {
		return this.statusCode;
	}
	public set StatusCode(newValue: string) {
		if (this.statusCode != newValue) {
			this.statusCode = newValue;
			this.MarkAsDirty('StatusCode');
		}
	}

	private unassignedCountry: boolean;
	public get UnassignedCountry() {
		return this.unassignedCountry;
	}
	public set UnassignedCountry(newValue: boolean) {
		if (this.unassignedCountry != newValue) {
			this.unassignedCountry = newValue;
			this.MarkAsDirty('UnassignedCountry');
		}
	}

	private customerId: string;
	public get CustomerId() {
		return this.customerId;
	}
	public set CustomerId(newValue: string) {
		if (this.customerId != newValue) {
			this.customerId = newValue;
			this.MarkAsDirty('CustomerId');
		}
	}

	private isUserOpened: boolean;
	public get IsUserOpened() {
		return this.isUserOpened;
	}
	public set IsUserOpened(newValue: boolean) {
		if (this.isUserOpened != newValue) {
			this.isUserOpened = newValue;
			this.MarkAsDirty('IsUserOpened');
		}
	}

	private opportunityId: string;
	public get OpportunityId() {
		return this.opportunityId;
	}
	public set OpportunityId(newValue: string) {
		if (this.opportunityId != newValue) {
			this.opportunityId = newValue;
			this.MarkAsDirty('OpportunityId');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private state: string;
	public get State() {
		return this.state;
	}
	public set State(newValue: string) {
		if (this.state != newValue) {
			this.state = newValue;
			this.MarkAsDirty('State');
		}
	}

	private city: string;
	public get City() {
		return this.city;
	}
	public set City(newValue: string) {
		if (this.city != newValue) {
			this.city = newValue;
			this.MarkAsDirty('City');
		}
	}

	private zipCode: string;
	public get ZipCode() {
		return this.zipCode;
	}
	public set ZipCode(newValue: string) {
		if (this.zipCode != newValue) {
			this.zipCode = newValue;
			this.MarkAsDirty('ZipCode');
		}
	}

	private street: string;
	public get Street() {
		return this.street;
	}
	public set Street(newValue: string) {
		if (this.street != newValue) {
			this.street = newValue;
			this.MarkAsDirty('Street');
		}
	}

	private vatNumber: string;
	public get VatNumber() {
		return this.vatNumber;
	}
	public set VatNumber(newValue: string) {
		if (this.vatNumber != newValue) {
			this.vatNumber = newValue;
			this.MarkAsDirty('VatNumber');
		}
	}

	private isUserEmailSent: boolean;
	public get IsUserEmailSent() {
		return this.isUserEmailSent;
	}
	public set IsUserEmailSent(newValue: boolean) {
		if (this.isUserEmailSent != newValue) {
			this.isUserEmailSent = newValue;
			this.MarkAsDirty('IsUserEmailSent');
		}
	}

	public OldEntityPM: LogitudeLeadPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'LogitudeLead');
			}
		}
	}
	private MyClone: LogitudeLeadPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
