//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class FollowUpPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private shipmentId: string;
	public get ShipmentId() {
		return this.shipmentId;
	}
	public set ShipmentId(newValue: string) {
		if (this.shipmentId != newValue) {
			this.shipmentId = newValue;
			this.MarkAsDirty('ShipmentId');
		}
	}

	private jobId: string;
	public get JobId() {
		return this.jobId;
	}
	public set JobId(newValue: string) {
		if (this.jobId != newValue) {
			this.jobId = newValue;
			this.MarkAsDirty('JobId');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private externalDocumentId: string;
	public get ExternalDocumentId() {
		return this.externalDocumentId;
	}
	public set ExternalDocumentId(newValue: string) {
		if (this.externalDocumentId != newValue) {
			this.externalDocumentId = newValue;
			this.MarkAsDirty('ExternalDocumentId');
		}
	}

	private date: Date;
	public get Date() {
		return this.date;
	}
	public set Date(newValue: Date) {
		if (this.date != newValue) {
			this.date = newValue;
			this.MarkAsDirty('Date');
		}
	}

	private isNew: boolean;
	public get IsNew() {
		return this.isNew;
	}
	public set IsNew(newValue: boolean) {
		if (this.isNew != newValue) {
			this.isNew = newValue;
			this.MarkAsDirty('IsNew');
		}
	}

	private notes: string;
	public get Notes() {
		return this.notes;
	}
	public set Notes(newValue: string) {
		if (this.notes != newValue) {
			this.notes = newValue;
			this.MarkAsDirty('Notes');
		}
	}

	private doneNote: string;
	public get DoneNote() {
		return this.doneNote;
	}
	public set DoneNote(newValue: string) {
		if (this.doneNote != newValue) {
			this.doneNote = newValue;
			this.MarkAsDirty('DoneNote');
		}
	}

	private doneDateTime: Date;
	public get DoneDateTime() {
		return this.doneDateTime;
	}
	public set DoneDateTime(newValue: Date) {
		if (this.doneDateTime != newValue) {
			this.doneDateTime = newValue;
			this.MarkAsDirty('DoneDateTime');
		}
	}

	private done: boolean;
	public get Done() {
		return this.done;
	}
	public set Done(newValue: boolean) {
		if (this.done != newValue) {
			this.done = newValue;
			this.MarkAsDirty('Done');
		}
	}

	private internalDocumentId: string;
	public get InternalDocumentId() {
		return this.internalDocumentId;
	}
	public set InternalDocumentId(newValue: string) {
		if (this.internalDocumentId != newValue) {
			this.internalDocumentId = newValue;
			this.MarkAsDirty('InternalDocumentId');
		}
	}

	private legType: string;
	public get LegType() {
		return this.legType;
	}
	public set LegType(newValue: string) {
		if (this.legType != newValue) {
			this.legType = newValue;
			this.MarkAsDirty('LegType');
		}
	}

	private deleted: boolean;
	public get Deleted() {
		return this.deleted;
	}
	public set Deleted(newValue: boolean) {
		if (this.deleted != newValue) {
			this.deleted = newValue;
			this.MarkAsDirty('Deleted');
		}
	}

	private entityDateId: string;
	public get EntityDateId() {
		return this.entityDateId;
	}
	public set EntityDateId(newValue: string) {
		if (this.entityDateId != newValue) {
			this.entityDateId = newValue;
			this.MarkAsDirty('EntityDateId');
		}
	}

	private eventTypeId: string;
	public get EventTypeId() {
		return this.eventTypeId;
	}
	public set EventTypeId(newValue: string) {
		if (this.eventTypeId != newValue) {
			this.eventTypeId = newValue;
			this.MarkAsDirty('EventTypeId');
		}
	}

	private eventTypeFollowUpName: string;
	public get EventTypeFollowUpName() {
		return this.eventTypeFollowUpName;
	}
	public set EventTypeFollowUpName(newValue: string) {
		if (this.eventTypeFollowUpName != newValue) {
			this.eventTypeFollowUpName = newValue;
			this.MarkAsDirty('EventTypeFollowUpName');
		}
	}

	private manualActivatedFollowUp: boolean;
	public get ManualActivatedFollowUp() {
		return this.manualActivatedFollowUp;
	}
	public set ManualActivatedFollowUp(newValue: boolean) {
		if (this.manualActivatedFollowUp != newValue) {
			this.manualActivatedFollowUp = newValue;
			this.MarkAsDirty('ManualActivatedFollowUp');
		}
	}

	private ownerUserId: string;
	public get OwnerUserId() {
		return this.ownerUserId;
	}
	public set OwnerUserId(newValue: string) {
		if (this.ownerUserId != newValue) {
			this.ownerUserId = newValue;
			this.MarkAsDirty('OwnerUserId');
		}
	}

	private ownerUserName: string;
	public get OwnerUserName() {
		return this.ownerUserName;
	}
	public set OwnerUserName(newValue: string) {
		if (this.ownerUserName != newValue) {
			this.ownerUserName = newValue;
			this.MarkAsDirty('OwnerUserName');
		}
	}

	private area: string;
	public get Area() {
		return this.area;
	}
	public set Area(newValue: string) {
		if (this.area != newValue) {
			this.area = newValue;
			this.MarkAsDirty('Area');
		}
	}

	private documentTypeId: string;
	public get DocumentTypeId() {
		return this.documentTypeId;
	}
	public set DocumentTypeId(newValue: string) {
		if (this.documentTypeId != newValue) {
			this.documentTypeId = newValue;
			this.MarkAsDirty('DocumentTypeId');
		}
	}

	private automationId: string;
	public get AutomationId() {
		return this.automationId;
	}
	public set AutomationId(newValue: string) {
		if (this.automationId != newValue) {
			this.automationId = newValue;
			this.MarkAsDirty('AutomationId');
		}
	}

	public OldEntityPM: FollowUpPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'FollowUp');
			}
		}
	}
	private MyClone: FollowUpPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
