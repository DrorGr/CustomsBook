//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class BIReportsExecutionLogPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private createdByUserId: string;
	public get CreatedByUserId() {
		return this.createdByUserId;
	}
	public set CreatedByUserId(newValue: string) {
		if (this.createdByUserId != newValue) {
			this.createdByUserId = newValue;
			this.MarkAsDirty('CreatedByUserId');
		}
	}

	private statusCode: string;
	public get StatusCode() {
		return this.statusCode;
	}
	public set StatusCode(newValue: string) {
		if (this.statusCode != newValue) {
			this.statusCode = newValue;
			this.MarkAsDirty('StatusCode');
		}
	}

	private exceptionMessage: string;
	public get ExceptionMessage() {
		return this.exceptionMessage;
	}
	public set ExceptionMessage(newValue: string) {
		if (this.exceptionMessage != newValue) {
			this.exceptionMessage = newValue;
			this.MarkAsDirty('ExceptionMessage');
		}
	}

	private doneDate: Date;
	public get DoneDate() {
		return this.doneDate;
	}
	public set DoneDate(newValue: Date) {
		if (this.doneDate != newValue) {
			this.doneDate = newValue;
			this.MarkAsDirty('DoneDate');
		}
	}

	private reportFilterXML: string;
	public get ReportFilterXML() {
		return this.reportFilterXML;
	}
	public set ReportFilterXML(newValue: string) {
		if (this.reportFilterXML != newValue) {
			this.reportFilterXML = newValue;
			this.MarkAsDirty('ReportFilterXML');
		}
	}

	private bIReportId: string;
	public get BIReportId() {
		return this.bIReportId;
	}
	public set BIReportId(newValue: string) {
		if (this.bIReportId != newValue) {
			this.bIReportId = newValue;
			this.MarkAsDirty('BIReportId');
		}
	}

	public OldEntityPM: BIReportsExecutionLogPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'BIReportsExecutionLog');
			}
		}
	}

	private MyClone: BIReportsExecutionLogPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
