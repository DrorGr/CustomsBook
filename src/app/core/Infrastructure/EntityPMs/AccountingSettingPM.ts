//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

// import {UIProperties, UIProperty} from '../../Infrastructure/Components/LogitudeComponents/UIProperties';
import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';

export class AccountingSettingPM {
	//   @Output() PropertyChanged: EventEmitter<PropertyChangedArgs> = new EventEmitter<PropertyChangedArgs>();
	//
	//   constructor() {
	//
	//       this.IsDirty = false;
	//   }

	private id: number;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: number) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private allowVoidARI: boolean;
	public get AllowVoidARI() {
		return this.allowVoidARI;
	}
	public set AllowVoidARI(newValue: boolean) {
		if (this.allowVoidARI != newValue) {
			this.allowVoidARI = newValue;
			this.MarkAsDirty('AllowVoidARI');
		}
	}

	private allowVoidARP: boolean;
	public get AllowVoidARP() {
		return this.allowVoidARP;
	}
	public set AllowVoidARP(newValue: boolean) {
		if (this.allowVoidARP != newValue) {
			this.allowVoidARP = newValue;
			this.MarkAsDirty('AllowVoidARP');
		}
	}

	private allowVoidAPI: boolean;
	public get AllowVoidAPI() {
		return this.allowVoidAPI;
	}
	public set AllowVoidAPI(newValue: boolean) {
		if (this.allowVoidAPI != newValue) {
			this.allowVoidAPI = newValue;
			this.MarkAsDirty('AllowVoidAPI');
		}
	}

	private allowVoidAPP: boolean;
	public get AllowVoidAPP() {
		return this.allowVoidAPP;
	}
	public set AllowVoidAPP(newValue: boolean) {
		if (this.allowVoidAPP != newValue) {
			this.allowVoidAPP = newValue;
			this.MarkAsDirty('AllowVoidAPP');
		}
	}

	private allowManualInvoiceNumber: boolean;
	public get AllowManualInvoiceNumber() {
		return this.allowManualInvoiceNumber;
	}
	public set AllowManualInvoiceNumber(newValue: boolean) {
		if (this.allowManualInvoiceNumber != newValue) {
			this.allowManualInvoiceNumber = newValue;
			this.MarkAsDirty('AllowManualInvoiceNumber');
		}
	}

	private isVatNumberMandatoryInAR: boolean;
	public get IsVatNumberMandatoryInAR() {
		return this.isVatNumberMandatoryInAR;
	}
	public set IsVatNumberMandatoryInAR(newValue: boolean) {
		if (this.isVatNumberMandatoryInAR != newValue) {
			this.isVatNumberMandatoryInAR = newValue;
			this.MarkAsDirty('IsVatNumberMandatoryInAR');
		}
	}

	private isVatNumberMandatoryInAP: boolean;
	public get IsVatNumberMandatoryInAP() {
		return this.isVatNumberMandatoryInAP;
	}
	public set IsVatNumberMandatoryInAP(newValue: boolean) {
		if (this.isVatNumberMandatoryInAP != newValue) {
			this.isVatNumberMandatoryInAP = newValue;
			this.MarkAsDirty('IsVatNumberMandatoryInAP');
		}
	}

	private isARInvoiceChronologicalDates: boolean;
	public get IsARInvoiceChronologicalDates() {
		return this.isARInvoiceChronologicalDates;
	}
	public set IsARInvoiceChronologicalDates(newValue: boolean) {
		if (this.isARInvoiceChronologicalDates != newValue) {
			this.isARInvoiceChronologicalDates = newValue;
			this.MarkAsDirty('IsARInvoiceChronologicalDates');
		}
	}

	private isARPaymentChronologicalDates: boolean;
	public get IsARPaymentChronologicalDates() {
		return this.isARPaymentChronologicalDates;
	}
	public set IsARPaymentChronologicalDates(newValue: boolean) {
		if (this.isARPaymentChronologicalDates != newValue) {
			this.isARPaymentChronologicalDates = newValue;
			this.MarkAsDirty('IsARPaymentChronologicalDates');
		}
	}

	private accountingSystemCode: string;
	public get AccountingSystemCode() {
		return this.accountingSystemCode;
	}
	public set AccountingSystemCode(newValue: string) {
		if (this.accountingSystemCode != newValue) {
			this.accountingSystemCode = newValue;
			this.MarkAsDirty('AccountingSystemCode');
		}
	}

	private receivableVATableTempCard: string;
	public get ReceivableVATableTempCard() {
		return this.receivableVATableTempCard;
	}
	public set ReceivableVATableTempCard(newValue: string) {
		if (this.receivableVATableTempCard != newValue) {
			this.receivableVATableTempCard = newValue;
			this.MarkAsDirty('ReceivableVATableTempCard');
		}
	}

	private receivableVATExemptTempCard: string;
	public get ReceivableVATExemptTempCard() {
		return this.receivableVATExemptTempCard;
	}
	public set ReceivableVATExemptTempCard(newValue: string) {
		if (this.receivableVATExemptTempCard != newValue) {
			this.receivableVATExemptTempCard = newValue;
			this.MarkAsDirty('ReceivableVATExemptTempCard');
		}
	}

	private payableVATableTempCard: string;
	public get PayableVATableTempCard() {
		return this.payableVATableTempCard;
	}
	public set PayableVATableTempCard(newValue: string) {
		if (this.payableVATableTempCard != newValue) {
			this.payableVATableTempCard = newValue;
			this.MarkAsDirty('PayableVATableTempCard');
		}
	}

	private payableVATExemptTempCard: string;
	public get PayableVATExemptTempCard() {
		return this.payableVATExemptTempCard;
	}
	public set PayableVATExemptTempCard(newValue: string) {
		if (this.payableVATExemptTempCard != newValue) {
			this.payableVATExemptTempCard = newValue;
			this.MarkAsDirty('PayableVATExemptTempCard');
		}
	}

	private allowMinusInvoicelines: boolean;
	public get AllowMinusInvoicelines() {
		return this.allowMinusInvoicelines;
	}
	public set AllowMinusInvoicelines(newValue: boolean) {
		if (this.allowMinusInvoicelines != newValue) {
			this.allowMinusInvoicelines = newValue;
			this.MarkAsDirty('AllowMinusInvoicelines');
		}
	}

	private allowClosureWithoutPayables: boolean;
	public get AllowClosureWithoutPayables() {
		return this.allowClosureWithoutPayables;
	}
	public set AllowClosureWithoutPayables(newValue: boolean) {
		if (this.allowClosureWithoutPayables != newValue) {
			this.allowClosureWithoutPayables = newValue;
			this.MarkAsDirty('AllowClosureWithoutPayables');
		}
	}

	private isSingleTaxPerInvoice: boolean;
	public get IsSingleTaxPerInvoice() {
		return this.isSingleTaxPerInvoice;
	}
	public set IsSingleTaxPerInvoice(newValue: boolean) {
		if (this.isSingleTaxPerInvoice != newValue) {
			this.isSingleTaxPerInvoice = newValue;
			this.MarkAsDirty('IsSingleTaxPerInvoice');
		}
	}

	private isARInvoicesTransferEnabled: boolean;
	public get IsARInvoicesTransferEnabled() {
		return this.isARInvoicesTransferEnabled;
	}
	public set IsARInvoicesTransferEnabled(newValue: boolean) {
		if (this.isARInvoicesTransferEnabled != newValue) {
			this.isARInvoicesTransferEnabled = newValue;
			this.MarkAsDirty('IsARInvoicesTransferEnabled');
		}
	}

	private isAPInvoicesTransferEnabled: boolean;
	public get IsAPInvoicesTransferEnabled() {
		return this.isAPInvoicesTransferEnabled;
	}
	public set IsAPInvoicesTransferEnabled(newValue: boolean) {
		if (this.isAPInvoicesTransferEnabled != newValue) {
			this.isAPInvoicesTransferEnabled = newValue;
			this.MarkAsDirty('IsAPInvoicesTransferEnabled');
		}
	}

	private isARPaymentsTransferEnabled: boolean;
	public get IsARPaymentsTransferEnabled() {
		return this.isARPaymentsTransferEnabled;
	}
	public set IsARPaymentsTransferEnabled(newValue: boolean) {
		if (this.isARPaymentsTransferEnabled != newValue) {
			this.isARPaymentsTransferEnabled = newValue;
			this.MarkAsDirty('IsARPaymentsTransferEnabled');
		}
	}

	private aRInvoiceTransferStartDate: Date;
	public get ARInvoiceTransferStartDate() {
		return this.aRInvoiceTransferStartDate;
	}
	public set ARInvoiceTransferStartDate(newValue: Date) {
		if (this.aRInvoiceTransferStartDate != newValue) {
			this.aRInvoiceTransferStartDate = newValue;
			this.MarkAsDirty('ARInvoiceTransferStartDate');
		}
	}

	private aPInvoiceTransferStartDate: Date;
	public get APInvoiceTransferStartDate() {
		return this.aPInvoiceTransferStartDate;
	}
	public set APInvoiceTransferStartDate(newValue: Date) {
		if (this.aPInvoiceTransferStartDate != newValue) {
			this.aPInvoiceTransferStartDate = newValue;
			this.MarkAsDirty('APInvoiceTransferStartDate');
		}
	}

	private aRPaymentTransferStartDate: Date;
	public get ARPaymentTransferStartDate() {
		return this.aRPaymentTransferStartDate;
	}
	public set ARPaymentTransferStartDate(newValue: Date) {
		if (this.aRPaymentTransferStartDate != newValue) {
			this.aRPaymentTransferStartDate = newValue;
			this.MarkAsDirty('ARPaymentTransferStartDate');
		}
	}

	private aPPaymentTransferStartDate: Date;
	public get APPaymentTransferStartDate() {
		return this.aPPaymentTransferStartDate;
	}
	public set APPaymentTransferStartDate(newValue: Date) {
		if (this.aPPaymentTransferStartDate != newValue) {
			this.aPPaymentTransferStartDate = newValue;
			this.MarkAsDirty('APPaymentTransferStartDate');
		}
	}

	private allowPositiveAmountsInTheCreditNote: boolean;
	public get AllowPositiveAmountsInTheCreditNote() {
		return this.allowPositiveAmountsInTheCreditNote;
	}
	public set AllowPositiveAmountsInTheCreditNote(newValue: boolean) {
		if (this.allowPositiveAmountsInTheCreditNote != newValue) {
			this.allowPositiveAmountsInTheCreditNote = newValue;
			this.MarkAsDirty('AllowPositiveAmountsInTheCreditNote');
		}
	}

	private qBOrealMeID: string;
	public get QBOrealMeID() {
		return this.qBOrealMeID;
	}
	public set QBOrealMeID(newValue: string) {
		if (this.qBOrealMeID != newValue) {
			this.qBOrealMeID = newValue;
			this.MarkAsDirty('QBOrealMeID');
		}
	}

	private vatNumber: string;
	public get VatNumber() {
		return this.vatNumber;
	}
	public set VatNumber(newValue: string) {
		if (this.vatNumber != newValue) {
			this.vatNumber = newValue;
			this.MarkAsDirty('VatNumber');
		}
	}

	private paymentTermId: string;
	public get PaymentTermId() {
		return this.paymentTermId;
	}
	public set PaymentTermId(newValue: string) {
		if (this.paymentTermId != newValue) {
			this.paymentTermId = newValue;
			this.MarkAsDirty('PaymentTermId');
		}
	}

	private accountingActivationDate: Date;
	public get AccountingActivationDate() {
		return this.accountingActivationDate;
	}
	public set AccountingActivationDate(newValue: Date) {
		if (this.accountingActivationDate != newValue) {
			this.accountingActivationDate = newValue;
			this.MarkAsDirty('AccountingActivationDate');
		}
	}

	private accountingActivated: boolean;
	public get AccountingActivated() {
		return this.accountingActivated;
	}
	public set AccountingActivated(newValue: boolean) {
		if (this.accountingActivated != newValue) {
			this.accountingActivated = newValue;
			this.MarkAsDirty('AccountingActivated');
		}
	}

	private transferToDropboxActivated: boolean;
	public get TransferToDropboxActivated() {
		return this.transferToDropboxActivated;
	}
	public set TransferToDropboxActivated(newValue: boolean) {
		if (this.transferToDropboxActivated != newValue) {
			this.transferToDropboxActivated = newValue;
			this.MarkAsDirty('TransferToDropboxActivated');
		}
	}

	private enableMultiPercentageVATTypes: boolean;
	public get EnableMultiPercentageVATTypes() {
		return this.enableMultiPercentageVATTypes;
	}
	public set EnableMultiPercentageVATTypes(newValue: boolean) {
		if (this.enableMultiPercentageVATTypes != newValue) {
			this.enableMultiPercentageVATTypes = newValue;
			this.MarkAsDirty('EnableMultiPercentageVATTypes');
		}
	}

	private notifyPastDateOnInvoiceEdit: boolean;
	public get NotifyPastDateOnInvoiceEdit() {
		return this.notifyPastDateOnInvoiceEdit;
	}
	public set NotifyPastDateOnInvoiceEdit(newValue: boolean) {
		if (this.notifyPastDateOnInvoiceEdit != newValue) {
			this.notifyPastDateOnInvoiceEdit = newValue;
			this.MarkAsDirty('NotifyPastDateOnInvoiceEdit');
		}
	}

	private enableMultiRateAPInvoices: boolean;
	public get EnableMultiRateAPInvoices() {
		return this.enableMultiRateAPInvoices;
	}
	public set EnableMultiRateAPInvoices(newValue: boolean) {
		if (this.enableMultiRateAPInvoices != newValue) {
			this.enableMultiRateAPInvoices = newValue;
			this.MarkAsDirty('EnableMultiRateAPInvoices');
		}
	}

	private registryDateTypeCode: string;
	public get RegistryDateTypeCode() {
		return this.registryDateTypeCode;
	}
	public set RegistryDateTypeCode(newValue: string) {
		if (this.registryDateTypeCode != newValue) {
			this.registryDateTypeCode = newValue;
			this.MarkAsDirty('RegistryDateTypeCode');
		}
	}

	private receivableVATCard: string;
	public get ReceivableVATCard() {
		return this.receivableVATCard;
	}
	public set ReceivableVATCard(newValue: string) {
		if (this.receivableVATCard != newValue) {
			this.receivableVATCard = newValue;
			this.MarkAsDirty('ReceivableVATCard');
		}
	}

	private payableVATCard: string;
	public get PayableVATCard() {
		return this.payableVATCard;
	}
	public set PayableVATCard(newValue: string) {
		if (this.payableVATCard != newValue) {
			this.payableVATCard = newValue;
			this.MarkAsDirty('PayableVATCard');
		}
	}

	private enableMultiCurrencyARPayments: boolean;
	public get EnableMultiCurrencyARPayments() {
		return this.enableMultiCurrencyARPayments;
	}
	public set EnableMultiCurrencyARPayments(newValue: boolean) {
		if (this.enableMultiCurrencyARPayments != newValue) {
			this.enableMultiCurrencyARPayments = newValue;
			this.MarkAsDirty('EnableMultiCurrencyARPayments');
		}
	}

	private enableMultiCurrencyAPPayments: boolean;
	public get EnableMultiCurrencyAPPayments() {
		return this.enableMultiCurrencyAPPayments;
	}
	public set EnableMultiCurrencyAPPayments(newValue: boolean) {
		if (this.enableMultiCurrencyAPPayments != newValue) {
			this.enableMultiCurrencyAPPayments = newValue;
			this.MarkAsDirty('EnableMultiCurrencyAPPayments');
		}
	}

	private isAPPaymentsTransferEnabled: boolean;
	public get IsAPPaymentsTransferEnabled() {
		return this.isAPPaymentsTransferEnabled;
	}
	public set IsAPPaymentsTransferEnabled(newValue: boolean) {
		if (this.isAPPaymentsTransferEnabled != newValue) {
			this.isAPPaymentsTransferEnabled = newValue;
			this.MarkAsDirty('IsAPPaymentsTransferEnabled');
		}
	}

	private enableNegativeOffsetARPayments: boolean;
	public get EnableNegativeOffsetARPayments() {
		return this.enableNegativeOffsetARPayments;
	}
	public set EnableNegativeOffsetARPayments(newValue: boolean) {
		if (this.enableNegativeOffsetARPayments != newValue) {
			this.enableNegativeOffsetARPayments = newValue;
			this.MarkAsDirty('EnableNegativeOffsetARPayments');
		}
	}

	private enableNegativeOffsetAPPayments: boolean;
	public get EnableNegativeOffsetAPPayments() {
		return this.enableNegativeOffsetAPPayments;
	}
	public set EnableNegativeOffsetAPPayments(newValue: boolean) {
		if (this.enableNegativeOffsetAPPayments != newValue) {
			this.enableNegativeOffsetAPPayments = newValue;
			this.MarkAsDirty('EnableNegativeOffsetAPPayments');
		}
	}

	private enableInvoiceStocksManagement: boolean;
	public get EnableInvoiceStocksManagement() {
		return this.enableInvoiceStocksManagement;
	}
	public set EnableInvoiceStocksManagement(newValue: boolean) {
		if (this.enableInvoiceStocksManagement != newValue) {
			this.enableInvoiceStocksManagement = newValue;
			this.MarkAsDirty('EnableInvoiceStocksManagement');
		}
	}

	private refreshToken: string;
	public get RefreshToken() {
		return this.refreshToken;
	}
	public set RefreshToken(newValue: string) {
		if (this.refreshToken != newValue) {
			this.refreshToken = newValue;
			this.MarkAsDirty('RefreshToken');
		}
	}

	private qBOOAuth: number;
	public get QBOOAuth() {
		return this.qBOOAuth;
	}
	public set QBOOAuth(newValue: number) {
		if (this.qBOOAuth != newValue) {
			this.qBOOAuth = newValue;
			this.MarkAsDirty('QBOOAuth');
		}
	}

	private allowManualARPaymentNumber: boolean;
	public get AllowManualARPaymentNumber() {
		return this.allowManualARPaymentNumber;
	}
	public set AllowManualARPaymentNumber(newValue: boolean) {
		if (this.allowManualARPaymentNumber != newValue) {
			this.allowManualARPaymentNumber = newValue;
			this.MarkAsDirty('AllowManualARPaymentNumber');
		}
	}

	private allowRegionalTaxManagement: boolean;
	public get AllowRegionalTaxManagement() {
		return this.allowRegionalTaxManagement;
	}
	public set AllowRegionalTaxManagement(newValue: boolean) {
		if (this.allowRegionalTaxManagement != newValue) {
			this.allowRegionalTaxManagement = newValue;
			this.MarkAsDirty('AllowRegionalTaxManagement');
		}
	}

	private enableAPPaymentExternalPayment: boolean;
	public get EnableAPPaymentExternalPayment() {
		return this.enableAPPaymentExternalPayment;
	}
	public set EnableAPPaymentExternalPayment(newValue: boolean) {
		if (this.enableAPPaymentExternalPayment != newValue) {
			this.enableAPPaymentExternalPayment = newValue;
			this.MarkAsDirty('EnableAPPaymentExternalPayment');
		}
	}

	private transferToFTPActivated: boolean;
	public get TransferToFTPActivated() {
		return this.transferToFTPActivated;
	}
	public set TransferToFTPActivated(newValue: boolean) {
		if (this.transferToFTPActivated != newValue) {
			this.transferToFTPActivated = newValue;
			this.MarkAsDirty('TransferToFTPActivated');
		}
	}

	private transferFTPDetailId: string;
	public get TransferFTPDetailId() {
		return this.transferFTPDetailId;
	}
	public set TransferFTPDetailId(newValue: string) {
		if (this.transferFTPDetailId != newValue) {
			this.transferFTPDetailId = newValue;
			this.MarkAsDirty('TransferFTPDetailId');
		}
	}

	private transferFTPDetailHost: string;
	public get TransferFTPDetailHost() {
		return this.transferFTPDetailHost;
	}
	public set TransferFTPDetailHost(newValue: string) {
		if (this.transferFTPDetailHost != newValue) {
			this.transferFTPDetailHost = newValue;
			this.MarkAsDirty('TransferFTPDetailHost');
		}
	}

	private enableEnteringTotalVAT: boolean;
	public get EnableEnteringTotalVAT() {
		return this.enableEnteringTotalVAT;
	}
	public set EnableEnteringTotalVAT(newValue: boolean) {
		if (this.enableEnteringTotalVAT != newValue) {
			this.enableEnteringTotalVAT = newValue;
			this.MarkAsDirty('EnableEnteringTotalVAT');
		}
	}

	private blockSendInvoiceOriginalCopy: boolean;
	public get BlockSendInvoiceOriginalCopy() {
		return this.blockSendInvoiceOriginalCopy;
	}
	public set BlockSendInvoiceOriginalCopy(newValue: boolean) {
		if (this.blockSendInvoiceOriginalCopy != newValue) {
			this.blockSendInvoiceOriginalCopy = newValue;
			this.MarkAsDirty('BlockSendInvoiceOriginalCopy');
		}
	}

	public OldEntityPM: AccountingSettingPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				// this.PropertyChanged.emit(new PropertyChangedArgs(propertyName,this));
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'AccountingSetting');
			}
		}
	}
	private MyClone: AccountingSettingPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
