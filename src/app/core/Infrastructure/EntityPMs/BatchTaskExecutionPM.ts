//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class BatchTaskExecutionPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private createdByUserId: string;
	public get CreatedByUserId() {
		return this.createdByUserId;
	}
	public set CreatedByUserId(newValue: string) {
		if (this.createdByUserId != newValue) {
			this.createdByUserId = newValue;
			this.MarkAsDirty('CreatedByUserId');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private className: string;
	public get ClassName() {
		return this.className;
	}
	public set ClassName(newValue: string) {
		if (this.className != newValue) {
			this.className = newValue;
			this.MarkAsDirty('ClassName');
		}
	}

	private prametersXml: string;
	public get PrametersXml() {
		return this.prametersXml;
	}
	public set PrametersXml(newValue: string) {
		if (this.prametersXml != newValue) {
			this.prametersXml = newValue;
			this.MarkAsDirty('PrametersXml');
		}
	}

	private statusCode: string;
	public get StatusCode() {
		return this.statusCode;
	}
	public set StatusCode(newValue: string) {
		if (this.statusCode != newValue) {
			this.statusCode = newValue;
			this.MarkAsDirty('StatusCode');
		}
	}

	private errorLog: string;
	public get ErrorLog() {
		return this.errorLog;
	}
	public set ErrorLog(newValue: string) {
		if (this.errorLog != newValue) {
			this.errorLog = newValue;
			this.MarkAsDirty('ErrorLog');
		}
	}

	private startDateTime: Date;
	public get StartDateTime() {
		return this.startDateTime;
	}
	public set StartDateTime(newValue: Date) {
		if (this.startDateTime != newValue) {
			this.startDateTime = newValue;
			this.MarkAsDirty('StartDateTime');
		}
	}

	private doneDateTime: Date;
	public get DoneDateTime() {
		return this.doneDateTime;
	}
	public set DoneDateTime(newValue: Date) {
		if (this.doneDateTime != newValue) {
			this.doneDateTime = newValue;
			this.MarkAsDirty('DoneDateTime');
		}
	}

	private progressMessage: string;
	public get ProgressMessage() {
		return this.progressMessage;
	}
	public set ProgressMessage(newValue: string) {
		if (this.progressMessage != newValue) {
			this.progressMessage = newValue;
			this.MarkAsDirty('ProgressMessage');
		}
	}

	private progressPercentage: number;
	public get ProgressPercentage() {
		return this.progressPercentage;
	}
	public set ProgressPercentage(newValue: number) {
		if (this.progressPercentage != newValue) {
			this.progressPercentage = newValue;
			this.MarkAsDirty('ProgressPercentage');
		}
	}

	private statusName: string;
	public get StatusName() {
		return this.statusName;
	}
	public set StatusName(newValue: string) {
		if (this.statusName != newValue) {
			this.statusName = newValue;
			this.MarkAsDirty('StatusName');
		}
	}

	private createdByUserName: string;
	public get CreatedByUserName() {
		return this.createdByUserName;
	}
	public set CreatedByUserName(newValue: string) {
		if (this.createdByUserName != newValue) {
			this.createdByUserName = newValue;
			this.MarkAsDirty('CreatedByUserName');
		}
	}

	private subject: string;
	public get Subject() {
		return this.subject;
	}
	public set Subject(newValue: string) {
		if (this.subject != newValue) {
			this.subject = newValue;
			this.MarkAsDirty('Subject');
		}
	}

	private callStack: string;
	public get CallStack() {
		return this.callStack;
	}
	public set CallStack(newValue: string) {
		if (this.callStack != newValue) {
			this.callStack = newValue;
			this.MarkAsDirty('CallStack');
		}
	}

	public OldEntityPM: BatchTaskExecutionPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'BatchTaskExecution');
			}
		}
	}

	private MyClone: BatchTaskExecutionPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
