//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class ErrorLogPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private userName: string;
	public get UserName() {
		return this.userName;
	}
	public set UserName(newValue: string) {
		if (this.userName != newValue) {
			this.userName = newValue;
			this.MarkAsDirty('UserName');
		}
	}

	private logDate: Date;
	public get LogDate() {
		return this.logDate;
	}
	public set LogDate(newValue: Date) {
		if (this.logDate != newValue) {
			this.logDate = newValue;
			this.MarkAsDirty('LogDate');
		}
	}

	private clientDate: Date;
	public get ClientDate() {
		return this.clientDate;
	}
	public set ClientDate(newValue: Date) {
		if (this.clientDate != newValue) {
			this.clientDate = newValue;
			this.MarkAsDirty('ClientDate');
		}
	}

	private tier: string;
	public get Tier() {
		return this.tier;
	}
	public set Tier(newValue: string) {
		if (this.tier != newValue) {
			this.tier = newValue;
			this.MarkAsDirty('Tier');
		}
	}

	private exception: string;
	public get Exception() {
		return this.exception;
	}
	public set Exception(newValue: string) {
		if (this.exception != newValue) {
			this.exception = newValue;
			this.MarkAsDirty('Exception');
		}
	}

	private stackTrace: string;
	public get StackTrace() {
		return this.stackTrace;
	}
	public set StackTrace(newValue: string) {
		if (this.stackTrace != newValue) {
			this.stackTrace = newValue;
			this.MarkAsDirty('StackTrace');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private isSecured: boolean;
	public get IsSecured() {
		return this.isSecured;
	}
	public set IsSecured(newValue: boolean) {
		if (this.isSecured != newValue) {
			this.isSecured = newValue;
			this.MarkAsDirty('IsSecured');
		}
	}

	private iP: string;
	public get IP() {
		return this.iP;
	}
	public set IP(newValue: string) {
		if (this.iP != newValue) {
			this.iP = newValue;
			this.MarkAsDirty('IP');
		}
	}

	public OldEntityPM: ErrorLogPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'ErrorLog');
			}
		}
	}
	private MyClone: ErrorLogPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
