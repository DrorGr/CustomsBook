//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { LBPTeamMemberPM } from './LBPTeamMemberPM';

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class TeamMemberBusinessRolePM {
	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private teamMemberId: string;
	public get TeamMemberId() {
		return this.teamMemberId;
	}
	public set TeamMemberId(newValue: string) {
		if (this.teamMemberId != newValue) {
			this.teamMemberId = newValue;
			this.MarkAsDirty('TeamMemberId');
		}
	}

	private addedByUserId: string;
	public get AddedByUserId() {
		return this.addedByUserId;
	}
	public set AddedByUserId(newValue: string) {
		if (this.addedByUserId != newValue) {
			this.addedByUserId = newValue;
			this.MarkAsDirty('AddedByUserId');
		}
	}

	private addDate: Date;
	public get AddDate() {
		return this.addDate;
	}
	public set AddDate(newValue: Date) {
		if (this.addDate != newValue) {
			this.addDate = newValue;
			this.MarkAsDirty('AddDate');
		}
	}

	private businessRoleId: string;
	public get BusinessRoleId() {
		return this.businessRoleId;
	}
	public set BusinessRoleId(newValue: string) {
		if (this.businessRoleId != newValue) {
			this.businessRoleId = newValue;
			this.MarkAsDirty('BusinessRoleId');
		}
	}

	private roleName: string;
	public get RoleName() {
		return this.roleName;
	}
	public set RoleName(newValue: string) {
		if (this.roleName != newValue) {
			this.roleName = newValue;
			this.MarkAsDirty('RoleName');
		}
	}

	public OldEntityPM: TeamMemberBusinessRolePM;

	private entityParentPM: any;
	public get EntityParentPM() {
		return this.entityParentPM;
	}
	public set EntityParentPM(newValue: any) {
		this.entityParentPM = newValue;
	}

	private changeSetOp: string;
	public get ChangeSetOp() {
		return this.changeSetOp;
	}
	public set ChangeSetOp(newValue: string) {
		this.changeSetOp = newValue;
	} //this.MarkAsDirty(); mohammad removed it because it sets the dirty bool to true when there is no changes.

	public UniqueKey: string;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;
			if (this.EntityParentPM) {
				this.EntityParentPM.MarkAsDirty();
			}
			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'TeamMemberBusinessRole');
			}
		}
	}

	private MyClone: TeamMemberBusinessRolePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
