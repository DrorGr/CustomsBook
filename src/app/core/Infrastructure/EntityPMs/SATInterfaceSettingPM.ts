//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

// import {UIProperties, UIProperty} from '../../Infrastructure/Components/LogitudeComponents/UIProperties';
import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class SATInterfaceSettingPM {
	//   @Output() PropertyChanged: EventEmitter<PropertyChangedArgs> = new EventEmitter<PropertyChangedArgs>();
	//
	//   constructor() {
	//
	//       this.IsDirty = false;
	//   }

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private sATInterfaceCode: string;
	public get SATInterfaceCode() {
		return this.sATInterfaceCode;
	}
	public set SATInterfaceCode(newValue: string) {
		if (this.sATInterfaceCode != newValue) {
			this.sATInterfaceCode = newValue;
			this.MarkAsDirty('SATInterfaceCode');
		}
	}

	private token: string;
	public get Token() {
		return this.token;
	}
	public set Token(newValue: string) {
		if (this.token != newValue) {
			this.token = newValue;
			this.MarkAsDirty('Token');
		}
	}

	private sATInterfaceName: string;
	public get SATInterfaceName() {
		return this.sATInterfaceName;
	}
	public set SATInterfaceName(newValue: string) {
		if (this.sATInterfaceName != newValue) {
			this.sATInterfaceName = newValue;
			this.MarkAsDirty('SATInterfaceName');
		}
	}

	private activationDate: Date;
	public get ActivationDate() {
		return this.activationDate;
	}
	public set ActivationDate(newValue: Date) {
		if (this.activationDate != newValue) {
			this.activationDate = newValue;
			this.MarkAsDirty('ActivationDate');
		}
	}

	private metodoPagoCode: string;
	public get MetodoPagoCode() {
		return this.metodoPagoCode;
	}
	public set MetodoPagoCode(newValue: string) {
		if (this.metodoPagoCode != newValue) {
			this.metodoPagoCode = newValue;
			this.MarkAsDirty('MetodoPagoCode');
		}
	}

	public OldEntityPM: SATInterfaceSettingPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				// this.PropertyChanged.emit(new PropertyChangedArgs(propertyName,this));
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'SATInterfaceSetting');
			}
		}
	}
	private MyClone: SATInterfaceSettingPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
