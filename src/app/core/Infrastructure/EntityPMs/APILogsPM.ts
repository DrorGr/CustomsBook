//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class APILogsPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private direction: string;
	public get Direction() {
		return this.direction;
	}
	public set Direction(newValue: string) {
		if (this.direction != newValue) {
			this.direction = newValue;
			this.MarkAsDirty('Direction');
		}
	}

	private status: string;
	public get Status() {
		return this.status;
	}
	public set Status(newValue: string) {
		if (this.status != newValue) {
			this.status = newValue;
			this.MarkAsDirty('Status');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private createDateUTC: Date;
	public get CreateDateUTC() {
		return this.createDateUTC;
	}
	public set CreateDateUTC(newValue: Date) {
		if (this.createDateUTC != newValue) {
			this.createDateUTC = newValue;
			this.MarkAsDirty('CreateDateUTC');
		}
	}

	private lastUpdateDate: Date;
	public get LastUpdateDate() {
		return this.lastUpdateDate;
	}
	public set LastUpdateDate(newValue: Date) {
		if (this.lastUpdateDate != newValue) {
			this.lastUpdateDate = newValue;
			this.MarkAsDirty('LastUpdateDate');
		}
	}

	private lastUpdateDateUTC: Date;
	public get LastUpdateDateUTC() {
		return this.lastUpdateDateUTC;
	}
	public set LastUpdateDateUTC(newValue: Date) {
		if (this.lastUpdateDateUTC != newValue) {
			this.lastUpdateDateUTC = newValue;
			this.MarkAsDirty('LastUpdateDateUTC');
		}
	}

	private numberOfRetries: number;
	public get NumberOfRetries() {
		return this.numberOfRetries;
	}
	public set NumberOfRetries(newValue: number) {
		if (this.numberOfRetries != newValue) {
			this.numberOfRetries = newValue;
			this.MarkAsDirty('NumberOfRetries');
		}
	}

	private expirationDate: Date;
	public get ExpirationDate() {
		return this.expirationDate;
	}
	public set ExpirationDate(newValue: Date) {
		if (this.expirationDate != newValue) {
			this.expirationDate = newValue;
			this.MarkAsDirty('ExpirationDate');
		}
	}

	private subject: string;
	public get Subject() {
		return this.subject;
	}
	public set Subject(newValue: string) {
		if (this.subject != newValue) {
			this.subject = newValue;
			this.MarkAsDirty('Subject');
		}
	}

	private entityId: string;
	public get EntityId() {
		return this.entityId;
	}
	public set EntityId(newValue: string) {
		if (this.entityId != newValue) {
			this.entityId = newValue;
			this.MarkAsDirty('EntityId');
		}
	}

	private objectTableId: string;
	public get ObjectTableId() {
		return this.objectTableId;
	}
	public set ObjectTableId(newValue: string) {
		if (this.objectTableId != newValue) {
			this.objectTableId = newValue;
			this.MarkAsDirty('ObjectTableId');
		}
	}

	private partnerName: string;
	public get PartnerName() {
		return this.partnerName;
	}
	public set PartnerName(newValue: string) {
		if (this.partnerName != newValue) {
			this.partnerName = newValue;
			this.MarkAsDirty('PartnerName');
		}
	}

	private refrence: string;
	public get Refrence() {
		return this.refrence;
	}
	public set Refrence(newValue: string) {
		if (this.refrence != newValue) {
			this.refrence = newValue;
			this.MarkAsDirty('Refrence');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private lastExceptionMessage: string;
	public get LastExceptionMessage() {
		return this.lastExceptionMessage;
	}
	public set LastExceptionMessage(newValue: string) {
		if (this.lastExceptionMessage != newValue) {
			this.lastExceptionMessage = newValue;
			this.MarkAsDirty('LastExceptionMessage');
		}
	}

	private correlationId: string;
	public get CorrelationId() {
		return this.correlationId;
	}
	public set CorrelationId(newValue: string) {
		if (this.correlationId != newValue) {
			this.correlationId = newValue;
			this.MarkAsDirty('CorrelationId');
		}
	}

	private diagnosticLog: string;
	public get DiagnosticLog() {
		return this.diagnosticLog;
	}
	public set DiagnosticLog(newValue: string) {
		if (this.diagnosticLog != newValue) {
			this.diagnosticLog = newValue;
			this.MarkAsDirty('DiagnosticLog');
		}
	}

	private requestData: string;
	public get RequestData() {
		return this.requestData;
	}
	public set RequestData(newValue: string) {
		if (this.requestData != newValue) {
			this.requestData = newValue;
			this.MarkAsDirty('RequestData');
		}
	}

	private responseData: string;
	public get ResponseData() {
		return this.responseData;
	}
	public set ResponseData(newValue: string) {
		if (this.responseData != newValue) {
			this.responseData = newValue;
			this.MarkAsDirty('ResponseData');
		}
	}

	private exceptionsMessage: string;
	public get ExceptionsMessage() {
		return this.exceptionsMessage;
	}
	public set ExceptionsMessage(newValue: string) {
		if (this.exceptionsMessage != newValue) {
			this.exceptionsMessage = newValue;
			this.MarkAsDirty('ExceptionsMessage');
		}
	}

	private statusName: string;
	public get StatusName() {
		return this.statusName;
	}
	public set StatusName(newValue: string) {
		if (this.statusName != newValue) {
			this.statusName = newValue;
			this.MarkAsDirty('StatusName');
		}
	}

	private batchNumber: string;
	public get BatchNumber() {
		return this.batchNumber;
	}
	public set BatchNumber(newValue: string) {
		if (this.batchNumber != newValue) {
			this.batchNumber = newValue;
			this.MarkAsDirty('BatchNumber');
		}
	}

	private customerId: string;
	public get CustomerId() {
		return this.customerId;
	}
	public set CustomerId(newValue: string) {
		if (this.customerId != newValue) {
			this.customerId = newValue;
			this.MarkAsDirty('CustomerId');
		}
	}

	private objectTableName: string;
	public get ObjectTableName() {
		return this.objectTableName;
	}
	public set ObjectTableName(newValue: string) {
		if (this.objectTableName != newValue) {
			this.objectTableName = newValue;
			this.MarkAsDirty('ObjectTableName');
		}
	}

	private queueMessageMoreDetailsId: string;
	public get QueueMessageMoreDetailsId() {
		return this.queueMessageMoreDetailsId;
	}
	public set QueueMessageMoreDetailsId(newValue: string) {
		if (this.queueMessageMoreDetailsId != newValue) {
			this.queueMessageMoreDetailsId = newValue;
			this.MarkAsDirty('QueueMessageMoreDetailsId');
		}
	}

	private queueType: string;
	public get QueueType() {
		return this.queueType;
	}
	public set QueueType(newValue: string) {
		if (this.queueType != newValue) {
			this.queueType = newValue;
			this.MarkAsDirty('QueueType');
		}
	}

	private queueMessage: string;
	public get QueueMessage() {
		return this.queueMessage;
	}
	public set QueueMessage(newValue: string) {
		if (this.queueMessage != newValue) {
			this.queueMessage = newValue;
			this.MarkAsDirty('QueueMessage');
		}
	}

	public OldEntityPM: APILogsPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'APILogs');
			}
		}
	}
	private MyClone: APILogsPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
