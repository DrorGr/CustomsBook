//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { TeamPM } from './TeamPM';
import { TeamMemberBusinessRolePM } from './TeamMemberBusinessRolePM';

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class LBPTeamMemberPM {
	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private memberUserId: string;
	public get MemberUserId() {
		return this.memberUserId;
	}
	public set MemberUserId(newValue: string) {
		if (this.memberUserId != newValue) {
			this.memberUserId = newValue;
			this.MarkAsDirty('MemberUserId');
		}
	}

	private teamId: string;
	public get TeamId() {
		return this.teamId;
	}
	public set TeamId(newValue: string) {
		if (this.teamId != newValue) {
			this.teamId = newValue;
			this.MarkAsDirty('TeamId');
		}
	}

	private addDate: Date;
	public get AddDate() {
		return this.addDate;
	}
	public set AddDate(newValue: Date) {
		if (this.addDate != newValue) {
			this.addDate = newValue;
			this.MarkAsDirty('AddDate');
		}
	}

	private addedByUserId: string;
	public get AddedByUserId() {
		return this.addedByUserId;
	}
	public set AddedByUserId(newValue: string) {
		if (this.addedByUserId != newValue) {
			this.addedByUserId = newValue;
			this.MarkAsDirty('AddedByUserId');
		}
	}

	private memberTeamId: string;
	public get MemberTeamId() {
		return this.memberTeamId;
	}
	public set MemberTeamId(newValue: string) {
		if (this.memberTeamId != newValue) {
			this.memberTeamId = newValue;
			this.MarkAsDirty('MemberTeamId');
		}
	}

	private businessRolesList: TeamMemberBusinessRolePM[];
	get BusinessRolesList() {
		if (this.businessRolesList == null) {
			this.businessRolesList = [];
		}

		return this.businessRolesList;
	}
	set BusinessRolesList(newValue: TeamMemberBusinessRolePM[]) {
		if (this.businessRolesList != newValue) {
			this.businessRolesList = newValue;
		}
	}
	public AddTeamMemberBusinessRole(item: TeamMemberBusinessRolePM) {
		if (item != null) {
			var index = this.BusinessRolesList.indexOf(item);
			if (index == -1) {
				item.EntityParentPM = this;
				this.BusinessRolesList.push(item);
				this.MarkAsDirty();
			}
		}
	}
	public RemoveTeamMemberBusinessRole(item: TeamMemberBusinessRolePM) {
		if (item != null) {
			var index = this.BusinessRolesList.indexOf(item);
			if (index > -1) {
				this.BusinessRolesList.splice(index, 1);
				this.MarkAsDirty();
			}
		}
	}
	//public BusinessRolesList: Array<TeamMemberBusinessRolePM>= [];

	public OldEntityPM: LBPTeamMemberPM;

	private entityParentPM: any;
	public get EntityParentPM() {
		return this.entityParentPM;
	}
	public set EntityParentPM(newValue: any) {
		this.entityParentPM = newValue;
	}

	private changeSetOp: string;
	public get ChangeSetOp() {
		return this.changeSetOp;
	}
	public set ChangeSetOp(newValue: string) {
		this.changeSetOp = newValue;
	} //this.MarkAsDirty(); mohammad removed it because it sets the dirty bool to true when there is no changes.

	public UniqueKey: string;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;
			if (this.EntityParentPM) {
				this.EntityParentPM.MarkAsDirty();
			}
			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'LBPTeamMember');
			}
		}
	}

	private MyClone: LBPTeamMemberPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
