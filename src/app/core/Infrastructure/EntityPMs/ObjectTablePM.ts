//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class ObjectTablePM {
	//
	constructor() {
		//
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private name: string;
	public get Name() {
		return this.name;
	}
	public set Name(newValue: string) {
		if (this.name != newValue) {
			this.name = newValue;
			this.MarkAsDirty('Name');
		}
	}

	private isNewWizard: boolean;
	public get IsNewWizard() {
		return this.isNewWizard;
	}
	public set IsNewWizard(newValue: boolean) {
		if (this.isNewWizard != newValue) {
			this.isNewWizard = newValue;
			this.MarkAsDirty('IsNewWizard');
		}
	}

	private newWizardControlName: string;
	public get NewWizardControlName() {
		return this.newWizardControlName;
	}
	public set NewWizardControlName(newValue: string) {
		if (this.newWizardControlName != newValue) {
			this.newWizardControlName = newValue;
			this.MarkAsDirty('NewWizardControlName');
		}
	}

	private lookUp1: string;
	public get LookUp1() {
		return this.lookUp1;
	}
	public set LookUp1(newValue: string) {
		if (this.lookUp1 != newValue) {
			this.lookUp1 = newValue;
			this.MarkAsDirty('LookUp1');
		}
	}

	private lookUp2: string;
	public get LookUp2() {
		return this.lookUp2;
	}
	public set LookUp2(newValue: string) {
		if (this.lookUp2 != newValue) {
			this.lookUp2 = newValue;
			this.MarkAsDirty('LookUp2');
		}
	}

	private dependencyFilter1: string;
	public get DependencyFilter1() {
		return this.dependencyFilter1;
	}
	public set DependencyFilter1(newValue: string) {
		if (this.dependencyFilter1 != newValue) {
			this.dependencyFilter1 = newValue;
			this.MarkAsDirty('DependencyFilter1');
		}
	}

	private dependencyFilter2: string;
	public get DependencyFilter2() {
		return this.dependencyFilter2;
	}
	public set DependencyFilter2(newValue: string) {
		if (this.dependencyFilter2 != newValue) {
			this.dependencyFilter2 = newValue;
			this.MarkAsDirty('DependencyFilter2');
		}
	}

	private dependencyFilter3: string;
	public get DependencyFilter3() {
		return this.dependencyFilter3;
	}
	public set DependencyFilter3(newValue: string) {
		if (this.dependencyFilter3 != newValue) {
			this.dependencyFilter3 = newValue;
			this.MarkAsDirty('DependencyFilter3');
		}
	}

	private keyPropertyPath: string;
	public get KeyPropertyPath() {
		return this.keyPropertyPath;
	}
	public set KeyPropertyPath(newValue: string) {
		if (this.keyPropertyPath != newValue) {
			this.keyPropertyPath = newValue;
			this.MarkAsDirty('KeyPropertyPath');
		}
	}

	private autoCompleteSearchWindow: boolean;
	public get AutoCompleteSearchWindow() {
		return this.autoCompleteSearchWindow;
	}
	public set AutoCompleteSearchWindow(newValue: boolean) {
		if (this.autoCompleteSearchWindow != newValue) {
			this.autoCompleteSearchWindow = newValue;
			this.MarkAsDirty('AutoCompleteSearchWindow');
		}
	}

	private isClosed: boolean;
	public get IsClosed() {
		return this.isClosed;
	}
	public set IsClosed(newValue: boolean) {
		if (this.isClosed != newValue) {
			this.isClosed = newValue;
			this.MarkAsDirty('IsClosed');
		}
	}

	private headerScreenId: string;
	public get HeaderScreenId() {
		return this.headerScreenId;
	}
	public set HeaderScreenId(newValue: string) {
		if (this.headerScreenId != newValue) {
			this.headerScreenId = newValue;
			this.MarkAsDirty('HeaderScreenId');
		}
	}

	private cacheOnClient: boolean;
	public get CacheOnClient() {
		return this.cacheOnClient;
	}
	public set CacheOnClient(newValue: boolean) {
		if (this.cacheOnClient != newValue) {
			this.cacheOnClient = newValue;
			this.MarkAsDirty('CacheOnClient');
		}
	}

	private editableFromAutoCompleteWindow: boolean;
	public get EditableFromAutoCompleteWindow() {
		return this.editableFromAutoCompleteWindow;
	}
	public set EditableFromAutoCompleteWindow(newValue: boolean) {
		if (this.editableFromAutoCompleteWindow != newValue) {
			this.editableFromAutoCompleteWindow = newValue;
			this.MarkAsDirty('EditableFromAutoCompleteWindow');
		}
	}

	private lastUpdateDate: Date;
	public get LastUpdateDate() {
		return this.lastUpdateDate;
	}
	public set LastUpdateDate(newValue: Date) {
		if (this.lastUpdateDate != newValue) {
			this.lastUpdateDate = newValue;
			this.MarkAsDirty('LastUpdateDate');
		}
	}

	private headerScreenCode: string;
	public get HeaderScreenCode() {
		return this.headerScreenCode;
	}
	public set HeaderScreenCode(newValue: string) {
		if (this.headerScreenCode != newValue) {
			this.headerScreenCode = newValue;
			this.MarkAsDirty('HeaderScreenCode');
		}
	}

	private enableEditFromLOV: boolean;
	public get EnableEditFromLOV() {
		return this.enableEditFromLOV;
	}
	public set EnableEditFromLOV(newValue: boolean) {
		if (this.enableEditFromLOV != newValue) {
			this.enableEditFromLOV = newValue;
			this.MarkAsDirty('EnableEditFromLOV');
		}
	}

	private enableAddFromLOV: boolean;
	public get EnableAddFromLOV() {
		return this.enableAddFromLOV;
	}
	public set EnableAddFromLOV(newValue: boolean) {
		if (this.enableAddFromLOV != newValue) {
			this.enableAddFromLOV = newValue;
			this.MarkAsDirty('EnableAddFromLOV');
		}
	}

	private hasCounter: boolean;
	public get HasCounter() {
		return this.hasCounter;
	}
	public set HasCounter(newValue: boolean) {
		if (this.hasCounter != newValue) {
			this.hasCounter = newValue;
			this.MarkAsDirty('HasCounter');
		}
	}

	private isRestrictable: boolean;
	public get IsRestrictable() {
		return this.isRestrictable;
	}
	public set IsRestrictable(newValue: boolean) {
		if (this.isRestrictable != newValue) {
			this.isRestrictable = newValue;
			this.MarkAsDirty('IsRestrictable');
		}
	}

	private isMain: boolean;
	public get IsMain() {
		return this.isMain;
	}
	public set IsMain(newValue: boolean) {
		if (this.isMain != newValue) {
			this.isMain = newValue;
			this.MarkAsDirty('IsMain');
		}
	}

	private isAutoComplete: boolean;
	public get IsAutoComplete() {
		return this.isAutoComplete;
	}
	public set IsAutoComplete(newValue: boolean) {
		if (this.isAutoComplete != newValue) {
			this.isAutoComplete = newValue;
			this.MarkAsDirty('IsAutoComplete');
		}
	}

	private sortingByObjectField: string;
	public get SortingByObjectField() {
		return this.sortingByObjectField;
	}
	public set SortingByObjectField(newValue: string) {
		if (this.sortingByObjectField != newValue) {
			this.sortingByObjectField = newValue;
			this.MarkAsDirty('SortingByObjectField');
		}
	}

	private dBTableName: string;
	public get DBTableName() {
		return this.dBTableName;
	}
	public set DBTableName(newValue: string) {
		if (this.dBTableName != newValue) {
			this.dBTableName = newValue;
			this.MarkAsDirty('DBTableName');
		}
	}

	private customFieldsCount: number;
	public get CustomFieldsCount() {
		return this.customFieldsCount;
	}
	public set CustomFieldsCount(newValue: number) {
		if (this.customFieldsCount != newValue) {
			this.customFieldsCount = newValue;
			this.MarkAsDirty('CustomFieldsCount');
		}
	}

	private hasCustomFields: boolean;
	public get HasCustomFields() {
		return this.hasCustomFields;
	}
	public set HasCustomFields(newValue: boolean) {
		if (this.hasCustomFields != newValue) {
			this.hasCustomFields = newValue;
			this.MarkAsDirty('HasCustomFields');
		}
	}

	private descriptionTextCodeId: string;
	public get DescriptionTextCodeId() {
		return this.descriptionTextCodeId;
	}
	public set DescriptionTextCodeId(newValue: string) {
		if (this.descriptionTextCodeId != newValue) {
			this.descriptionTextCodeId = newValue;
			this.MarkAsDirty('DescriptionTextCodeId');
		}
	}

	private descriptionTextCodeCode: string;
	public get DescriptionTextCodeCode() {
		return this.descriptionTextCodeCode;
	}
	public set DescriptionTextCodeCode(newValue: string) {
		if (this.descriptionTextCodeCode != newValue) {
			this.descriptionTextCodeCode = newValue;
			this.MarkAsDirty('DescriptionTextCodeCode');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private isSaveButtonVisible: boolean;
	public get IsSaveButtonVisible() {
		return this.isSaveButtonVisible;
	}
	public set IsSaveButtonVisible(newValue: boolean) {
		if (this.isSaveButtonVisible != newValue) {
			this.isSaveButtonVisible = newValue;
			this.MarkAsDirty('IsSaveButtonVisible');
		}
	}

	private maxNumberOfCustomFields: number;
	public get MaxNumberOfCustomFields() {
		return this.maxNumberOfCustomFields;
	}
	public set MaxNumberOfCustomFields(newValue: number) {
		if (this.maxNumberOfCustomFields != newValue) {
			this.maxNumberOfCustomFields = newValue;
			this.MarkAsDirty('MaxNumberOfCustomFields');
		}
	}

	private allowCustomFields: boolean;
	public get AllowCustomFields() {
		return this.allowCustomFields;
	}
	public set AllowCustomFields(newValue: boolean) {
		if (this.allowCustomFields != newValue) {
			this.allowCustomFields = newValue;
			this.MarkAsDirty('AllowCustomFields');
		}
	}

	private mainTipCode: string;
	public get MainTipCode() {
		return this.mainTipCode;
	}
	public set MainTipCode(newValue: string) {
		if (this.mainTipCode != newValue) {
			this.mainTipCode = newValue;
			this.MarkAsDirty('MainTipCode');
		}
	}

	private enableSecurity: boolean;
	public get EnableSecurity() {
		return this.enableSecurity;
	}
	public set EnableSecurity(newValue: boolean) {
		if (this.enableSecurity != newValue) {
			this.enableSecurity = newValue;
			this.MarkAsDirty('EnableSecurity');
		}
	}

	private objectTableTypeCode: string;
	public get ObjectTableTypeCode() {
		return this.objectTableTypeCode;
	}
	public set ObjectTableTypeCode(newValue: string) {
		if (this.objectTableTypeCode != newValue) {
			this.objectTableTypeCode = newValue;
			this.MarkAsDirty('ObjectTableTypeCode');
		}
	}

	private isComposition: boolean;
	public get IsComposition() {
		return this.isComposition;
	}
	public set IsComposition(newValue: boolean) {
		if (this.isComposition != newValue) {
			this.isComposition = newValue;
			this.MarkAsDirty('IsComposition');
		}
	}

	private hasDynamicHeader: boolean;
	public get HasDynamicHeader() {
		return this.hasDynamicHeader;
	}
	public set HasDynamicHeader(newValue: boolean) {
		if (this.hasDynamicHeader != newValue) {
			this.hasDynamicHeader = newValue;
			this.MarkAsDirty('HasDynamicHeader');
		}
	}

	private isLookUp: boolean;
	public get IsLookUp() {
		return this.isLookUp;
	}
	public set IsLookUp(newValue: boolean) {
		if (this.isLookUp != newValue) {
			this.isLookUp = newValue;
			this.MarkAsDirty('IsLookUp');
		}
	}

	private hasDocuments: boolean;
	public get HasDocuments() {
		return this.hasDocuments;
	}
	public set HasDocuments(newValue: boolean) {
		if (this.hasDocuments != newValue) {
			this.hasDocuments = newValue;
			this.MarkAsDirty('HasDocuments');
		}
	}

	private newButtonTextCodeCode: string;
	public get NewButtonTextCodeCode() {
		return this.newButtonTextCodeCode;
	}
	public set NewButtonTextCodeCode(newValue: string) {
		if (this.newButtonTextCodeCode != newValue) {
			this.newButtonTextCodeCode = newValue;
			this.MarkAsDirty('NewButtonTextCodeCode');
		}
	}

	private hasCustomValidator: boolean;
	public get HasCustomValidator() {
		return this.hasCustomValidator;
	}
	public set HasCustomValidator(newValue: boolean) {
		if (this.hasCustomValidator != newValue) {
			this.hasCustomValidator = newValue;
			this.MarkAsDirty('HasCustomValidator');
		}
	}

	private clientModuleName: string;
	public get ClientModuleName() {
		return this.clientModuleName;
	}
	public set ClientModuleName(newValue: string) {
		if (this.clientModuleName != newValue) {
			this.clientModuleName = newValue;
			this.MarkAsDirty('ClientModuleName');
		}
	}

	private serverModuleName: string;
	public get ServerModuleName() {
		return this.serverModuleName;
	}
	public set ServerModuleName(newValue: string) {
		if (this.serverModuleName != newValue) {
			this.serverModuleName = newValue;
			this.MarkAsDirty('ServerModuleName');
		}
	}

	private newWizardComponentPath: string;
	public get NewWizardComponentPath() {
		return this.newWizardComponentPath;
	}
	public set NewWizardComponentPath(newValue: string) {
		if (this.newWizardComponentPath != newValue) {
			this.newWizardComponentPath = newValue;
			this.MarkAsDirty('NewWizardComponentPath');
		}
	}

	private hasHelper: boolean;
	public get HasHelper() {
		return this.hasHelper;
	}
	public set HasHelper(newValue: boolean) {
		if (this.hasHelper != newValue) {
			this.hasHelper = newValue;
			this.MarkAsDirty('HasHelper');
		}
	}

	private hasShortTitle: boolean;
	public get HasShortTitle() {
		return this.hasShortTitle;
	}
	public set HasShortTitle(newValue: boolean) {
		if (this.hasShortTitle != newValue) {
			this.hasShortTitle = newValue;
			this.MarkAsDirty('HasShortTitle');
		}
	}

	private hasMenuButtons: boolean;
	public get HasMenuButtons() {
		return this.hasMenuButtons;
	}
	public set HasMenuButtons(newValue: boolean) {
		if (this.hasMenuButtons != newValue) {
			this.hasMenuButtons = newValue;
			this.MarkAsDirty('HasMenuButtons');
		}
	}

	private hasFiltersMenu: boolean;
	public get HasFiltersMenu() {
		return this.hasFiltersMenu;
	}
	public set HasFiltersMenu(newValue: boolean) {
		if (this.hasFiltersMenu != newValue) {
			this.hasFiltersMenu = newValue;
			this.MarkAsDirty('HasFiltersMenu');
		}
	}

	private downloadToExcelFeatureCode: string;
	public get DownloadToExcelFeatureCode() {
		return this.downloadToExcelFeatureCode;
	}
	public set DownloadToExcelFeatureCode(newValue: string) {
		if (this.downloadToExcelFeatureCode != newValue) {
			this.downloadToExcelFeatureCode = newValue;
			this.MarkAsDirty('DownloadToExcelFeatureCode');
		}
	}

	private entityResourceLastUpdate: Date;
	public get EntityResourceLastUpdate() {
		return this.entityResourceLastUpdate;
	}
	public set EntityResourceLastUpdate(newValue: Date) {
		if (this.entityResourceLastUpdate != newValue) {
			this.entityResourceLastUpdate = newValue;
			this.MarkAsDirty('EntityResourceLastUpdate');
		}
	}

	private splitComponentPath: string;
	public get SplitComponentPath() {
		return this.splitComponentPath;
	}
	public set SplitComponentPath(newValue: string) {
		if (this.splitComponentPath != newValue) {
			this.splitComponentPath = newValue;
			this.MarkAsDirty('SplitComponentPath');
		}
	}

	private allowedForComputingPartners: boolean;
	public get AllowedForComputingPartners() {
		return this.allowedForComputingPartners;
	}
	public set AllowedForComputingPartners(newValue: boolean) {
		if (this.allowedForComputingPartners != newValue) {
			this.allowedForComputingPartners = newValue;
			this.MarkAsDirty('AllowedForComputingPartners');
		}
	}

	private codeField: string;
	public get CodeField() {
		return this.codeField;
	}
	public set CodeField(newValue: string) {
		if (this.codeField != newValue) {
			this.codeField = newValue;
			this.MarkAsDirty('CodeField');
		}
	}

	private nameField: string;
	public get NameField() {
		return this.nameField;
	}
	public set NameField(newValue: string) {
		if (this.nameField != newValue) {
			this.nameField = newValue;
			this.MarkAsDirty('NameField');
		}
	}

	private disableSearchBox: boolean;
	public get DisableSearchBox() {
		return this.disableSearchBox;
	}
	public set DisableSearchBox(newValue: boolean) {
		if (this.disableSearchBox != newValue) {
			this.disableSearchBox = newValue;
			this.MarkAsDirty('DisableSearchBox');
		}
	}

	private allowedInTicket: boolean;
	public get AllowedInTicket() {
		return this.allowedInTicket;
	}
	public set AllowedInTicket(newValue: boolean) {
		if (this.allowedInTicket != newValue) {
			this.allowedInTicket = newValue;
			this.MarkAsDirty('AllowedInTicket');
		}
	}

	private lovDisplayMemberPath: string;
	public get LovDisplayMemberPath() {
		return this.lovDisplayMemberPath;
	}
	public set LovDisplayMemberPath(newValue: string) {
		if (this.lovDisplayMemberPath != newValue) {
			this.lovDisplayMemberPath = newValue;
			this.MarkAsDirty('LovDisplayMemberPath');
		}
	}

	private lovDisplayMemberPathLocal: string;
	public get LovDisplayMemberPathLocal() {
		return this.lovDisplayMemberPathLocal;
	}
	public set LovDisplayMemberPathLocal(newValue: string) {
		if (this.lovDisplayMemberPathLocal != newValue) {
			this.lovDisplayMemberPathLocal = newValue;
			this.MarkAsDirty('LovDisplayMemberPathLocal');
		}
	}

	private displayName: string;
	public get DisplayName() {
		return this.displayName;
	}
	public set DisplayName(newValue: string) {
		if (this.displayName != newValue) {
			this.displayName = newValue;
			this.MarkAsDirty('DisplayName');
		}
	}

	private isTabsHidden: boolean;
	public get IsTabsHidden() {
		return this.isTabsHidden;
	}
	public set IsTabsHidden(newValue: boolean) {
		if (this.isTabsHidden != newValue) {
			this.isTabsHidden = newValue;
			this.MarkAsDirty('IsTabsHidden');
		}
	}

	public OldEntityPM: ObjectTablePM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'ObjectTable');
			}
		}
	}
	private MyClone: ObjectTablePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
