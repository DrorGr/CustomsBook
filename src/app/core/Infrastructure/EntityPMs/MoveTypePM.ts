//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class MoveTypePM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private moveTypeEnglishName: string;
	public get MoveTypeEnglishName() {
		return this.moveTypeEnglishName;
	}
	public set MoveTypeEnglishName(newValue: string) {
		if (this.moveTypeEnglishName != newValue) {
			this.moveTypeEnglishName = newValue;
			this.MarkAsDirty('MoveTypeEnglishName');
		}
	}

	private moveTypeLocalName: string;
	public get MoveTypeLocalName() {
		return this.moveTypeLocalName;
	}
	public set MoveTypeLocalName(newValue: string) {
		if (this.moveTypeLocalName != newValue) {
			this.moveTypeLocalName = newValue;
			this.MarkAsDirty('MoveTypeLocalName');
		}
	}

	private transportModeId: string;
	public get TransportModeId() {
		return this.transportModeId;
	}
	public set TransportModeId(newValue: string) {
		if (this.transportModeId != newValue) {
			this.transportModeId = newValue;
			this.MarkAsDirty('TransportModeId');
		}
	}

	private addedManually: boolean;
	public get AddedManually() {
		return this.addedManually;
	}
	public set AddedManually(newValue: boolean) {
		if (this.addedManually != newValue) {
			this.addedManually = newValue;
			this.MarkAsDirty('AddedManually');
		}
	}

	private inActive: boolean;
	public get InActive() {
		return this.inActive;
	}
	public set InActive(newValue: boolean) {
		if (this.inActive != newValue) {
			this.inActive = newValue;
			this.MarkAsDirty('InActive');
		}
	}

	private code: string;
	public get Code() {
		return this.code;
	}
	public set Code(newValue: string) {
		if (this.code != newValue) {
			this.code = newValue;
			this.MarkAsDirty('Code');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private isAir: boolean;
	public get IsAir() {
		return this.isAir;
	}
	public set IsAir(newValue: boolean) {
		if (this.isAir != newValue) {
			this.isAir = newValue;
			this.MarkAsDirty('IsAir');
		}
	}

	private isInland: boolean;
	public get IsInland() {
		return this.isInland;
	}
	public set IsInland(newValue: boolean) {
		if (this.isInland != newValue) {
			this.isInland = newValue;
			this.MarkAsDirty('IsInland');
		}
	}

	private isOcean: boolean;
	public get IsOcean() {
		return this.isOcean;
	}
	public set IsOcean(newValue: boolean) {
		if (this.isOcean != newValue) {
			this.isOcean = newValue;
			this.MarkAsDirty('IsOcean');
		}
	}

	public OldEntityPM: MoveTypePM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'MoveType');
			}
		}
	}
	private MyClone: MoveTypePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
