//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//
import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class RuleUpdateHistoryPM {
	//
	//
	//   constructor() {
	//
	//       this.IsDirty = false;
	//   }

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private updateDate: Date;
	public get UpdateDate() {
		return this.updateDate;
	}
	public set UpdateDate(newValue: Date) {
		if (this.updateDate != newValue) {
			this.updateDate = newValue;
			this.MarkAsDirty('UpdateDate');
		}
	}

	private ruleCode: string;
	public get RuleCode() {
		return this.ruleCode;
	}
	public set RuleCode(newValue: string) {
		if (this.ruleCode != newValue) {
			this.ruleCode = newValue;
			this.MarkAsDirty('RuleCode');
		}
	}

	private eventName: string;
	public get EventName() {
		return this.eventName;
	}
	public set EventName(newValue: string) {
		if (this.eventName != newValue) {
			this.eventName = newValue;
			this.MarkAsDirty('EventName');
		}
	}

	private createdByUserId: string;
	public get CreatedByUserId() {
		return this.createdByUserId;
	}
	public set CreatedByUserId(newValue: string) {
		if (this.createdByUserId != newValue) {
			this.createdByUserId = newValue;
			this.MarkAsDirty('CreatedByUserId');
		}
	}

	private updatedByUserId: string;
	public get UpdatedByUserId() {
		return this.updatedByUserId;
	}
	public set UpdatedByUserId(newValue: string) {
		if (this.updatedByUserId != newValue) {
			this.updatedByUserId = newValue;
			this.MarkAsDirty('UpdatedByUserId');
		}
	}

	public OldEntityPM: RuleUpdateHistoryPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				// this.PropertyChanged.emit(new PropertyChangedArgs(propertyName,this));
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'RuleUpdateHistory');
			}
		}
	}
	private MyClone: RuleUpdateHistoryPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
