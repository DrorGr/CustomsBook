//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class FeatureTogglePM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private createdByUserId: string;
	public get CreatedByUserId() {
		return this.createdByUserId;
	}
	public set CreatedByUserId(newValue: string) {
		if (this.createdByUserId != newValue) {
			this.createdByUserId = newValue;
			this.MarkAsDirty('CreatedByUserId');
		}
	}

	private updateDate: Date;
	public get UpdateDate() {
		return this.updateDate;
	}
	public set UpdateDate(newValue: Date) {
		if (this.updateDate != newValue) {
			this.updateDate = newValue;
			this.MarkAsDirty('UpdateDate');
		}
	}

	private updatedByUserId: string;
	public get UpdatedByUserId() {
		return this.updatedByUserId;
	}
	public set UpdatedByUserId(newValue: string) {
		if (this.updatedByUserId != newValue) {
			this.updatedByUserId = newValue;
			this.MarkAsDirty('UpdatedByUserId');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private tenantNumber: number;
	public get TenantNumber() {
		return this.tenantNumber;
	}
	public set TenantNumber(newValue: number) {
		if (this.tenantNumber != newValue) {
			this.tenantNumber = newValue;
			this.MarkAsDirty('TenantNumber');
		}
	}

	private inactive: boolean;
	public get Inactive() {
		return this.inactive;
	}
	public set Inactive(newValue: boolean) {
		if (this.inactive != newValue) {
			this.inactive = newValue;
			this.MarkAsDirty('Inactive');
		}
	}

	private toggleCode: string;
	public get ToggleCode() {
		return this.toggleCode;
	}
	public set ToggleCode(newValue: string) {
		if (this.toggleCode != newValue) {
			this.toggleCode = newValue;
			this.MarkAsDirty('ToggleCode');
		}
	}

	private toggleName: string;
	public get ToggleName() {
		return this.toggleName;
	}
	public set ToggleName(newValue: string) {
		if (this.toggleName != newValue) {
			this.toggleName = newValue;
			this.MarkAsDirty('ToggleName');
		}
	}

	private createdByUser: string;
	public get CreatedByUser() {
		return this.createdByUser;
	}
	public set CreatedByUser(newValue: string) {
		if (this.createdByUser != newValue) {
			this.createdByUser = newValue;
			this.MarkAsDirty('CreatedByUser');
		}
	}

	private toggleDescription: string;
	public get ToggleDescription() {
		return this.toggleDescription;
	}
	public set ToggleDescription(newValue: string) {
		if (this.toggleDescription != newValue) {
			this.toggleDescription = newValue;
			this.MarkAsDirty('ToggleDescription');
		}
	}

	private isMultiTenant: boolean;
	public get IsMultiTenant() {
		return this.isMultiTenant;
	}
	public set IsMultiTenant(newValue: boolean) {
		if (this.isMultiTenant != newValue) {
			this.isMultiTenant = newValue;
			this.MarkAsDirty('IsMultiTenant');
		}
	}

	private fromTenantNumber: number;
	public get FromTenantNumber() {
		return this.fromTenantNumber;
	}
	public set FromTenantNumber(newValue: number) {
		if (this.fromTenantNumber != newValue) {
			this.fromTenantNumber = newValue;
			this.MarkAsDirty('FromTenantNumber');
		}
	}

	private toTenantNumber: number;
	public get ToTenantNumber() {
		return this.toTenantNumber;
	}
	public set ToTenantNumber(newValue: number) {
		if (this.toTenantNumber != newValue) {
			this.toTenantNumber = newValue;
			this.MarkAsDirty('ToTenantNumber');
		}
	}

	public OldEntityPM: FeatureTogglePM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'FeatureToggle');
			}
		}
	}

	private MyClone: FeatureTogglePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
