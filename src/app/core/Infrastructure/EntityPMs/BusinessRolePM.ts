//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class BusinessRolePM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private createdByUserId: string;
	public get CreatedByUserId() {
		return this.createdByUserId;
	}
	public set CreatedByUserId(newValue: string) {
		if (this.createdByUserId != newValue) {
			this.createdByUserId = newValue;
			this.MarkAsDirty('CreatedByUserId');
		}
	}

	private updateDate: Date;
	public get UpdateDate() {
		return this.updateDate;
	}
	public set UpdateDate(newValue: Date) {
		if (this.updateDate != newValue) {
			this.updateDate = newValue;
			this.MarkAsDirty('UpdateDate');
		}
	}

	private updatedByUserId: string;
	public get UpdatedByUserId() {
		return this.updatedByUserId;
	}
	public set UpdatedByUserId(newValue: string) {
		if (this.updatedByUserId != newValue) {
			this.updatedByUserId = newValue;
			this.MarkAsDirty('UpdatedByUserId');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private name: string;
	public get Name() {
		return this.name;
	}
	public set Name(newValue: string) {
		if (this.name != newValue) {
			this.name = newValue;
			this.MarkAsDirty('Name');
		}
	}

	private localName: string;
	public get LocalName() {
		return this.localName;
	}
	public set LocalName(newValue: string) {
		if (this.localName != newValue) {
			this.localName = newValue;
			this.MarkAsDirty('LocalName');
		}
	}

	private inActive: boolean;
	public get InActive() {
		return this.inActive;
	}
	public set InActive(newValue: boolean) {
		if (this.inActive != newValue) {
			this.inActive = newValue;
			this.MarkAsDirty('InActive');
		}
	}

	private description: string;
	public get Description() {
		return this.description;
	}
	public set Description(newValue: string) {
		if (this.description != newValue) {
			this.description = newValue;
			this.MarkAsDirty('Description');
		}
	}

	public OldEntityPM: BusinessRolePM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'BusinessRole');
			}
		}
	}

	private MyClone: BusinessRolePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
