//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class AnalyzeQueuePM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private messageBody: string;
	public get MessageBody() {
		return this.messageBody;
	}
	public set MessageBody(newValue: string) {
		if (this.messageBody != newValue) {
			this.messageBody = newValue;
			this.MarkAsDirty('MessageBody');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private from: string;
	public get From() {
		return this.from;
	}
	public set From(newValue: string) {
		if (this.from != newValue) {
			this.from = newValue;
			this.MarkAsDirty('From');
		}
	}

	private createDate: Date;
	public get CreateDate() {
		return this.createDate;
	}
	public set CreateDate(newValue: Date) {
		if (this.createDate != newValue) {
			this.createDate = newValue;
			this.MarkAsDirty('CreateDate');
		}
	}

	private fileSize: number;
	public get FileSize() {
		return this.fileSize;
	}
	public set FileSize(newValue: number) {
		if (this.fileSize != newValue) {
			this.fileSize = newValue;
			this.MarkAsDirty('FileSize');
		}
	}

	private status: string;
	public get Status() {
		return this.status;
	}
	public set Status(newValue: string) {
		if (this.status != newValue) {
			this.status = newValue;
			this.MarkAsDirty('Status');
		}
	}

	private errorMessage: string;
	public get ErrorMessage() {
		return this.errorMessage;
	}
	public set ErrorMessage(newValue: string) {
		if (this.errorMessage != newValue) {
			this.errorMessage = newValue;
			this.MarkAsDirty('ErrorMessage');
		}
	}

	private communicationLogId: string;
	public get CommunicationLogId() {
		return this.communicationLogId;
	}
	public set CommunicationLogId(newValue: string) {
		if (this.communicationLogId != newValue) {
			this.communicationLogId = newValue;
			this.MarkAsDirty('CommunicationLogId');
		}
	}

	private subject: string;
	public get Subject() {
		return this.subject;
	}
	public set Subject(newValue: string) {
		if (this.subject != newValue) {
			this.subject = newValue;
			this.MarkAsDirty('Subject');
		}
	}

	private connectedToTenant: boolean;
	public get ConnectedToTenant() {
		return this.connectedToTenant;
	}
	public set ConnectedToTenant(newValue: boolean) {
		if (this.connectedToTenant != newValue) {
			this.connectedToTenant = newValue;
			this.MarkAsDirty('ConnectedToTenant');
		}
	}

	private connectedToEntity: boolean;
	public get ConnectedToEntity() {
		return this.connectedToEntity;
	}
	public set ConnectedToEntity(newValue: boolean) {
		if (this.connectedToEntity != newValue) {
			this.connectedToEntity = newValue;
			this.MarkAsDirty('ConnectedToEntity');
		}
	}

	private retries: number;
	public get Retries() {
		return this.retries;
	}
	public set Retries(newValue: number) {
		if (this.retries != newValue) {
			this.retries = newValue;
			this.MarkAsDirty('Retries');
		}
	}

	private isSecured: boolean;
	public get IsSecured() {
		return this.isSecured;
	}
	public set IsSecured(newValue: boolean) {
		if (this.isSecured != newValue) {
			this.isSecured = newValue;
			this.MarkAsDirty('IsSecured');
		}
	}

	private entityReference: string;
	public get EntityReference() {
		return this.entityReference;
	}
	public set EntityReference(newValue: string) {
		if (this.entityReference != newValue) {
			this.entityReference = newValue;
			this.MarkAsDirty('EntityReference');
		}
	}

	private messageBodyString: string;
	public get MessageBodyString() {
		return this.messageBodyString;
	}
	public set MessageBodyString(newValue: string) {
		if (this.messageBodyString != newValue) {
			this.messageBodyString = newValue;
			this.MarkAsDirty('MessageBodyString');
		}
	}

	private objectTableName: string;
	public get ObjectTableName() {
		return this.objectTableName;
	}
	public set ObjectTableName(newValue: string) {
		if (this.objectTableName != newValue) {
			this.objectTableName = newValue;
			this.MarkAsDirty('ObjectTableName');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private stackTrace: string;
	public get StackTrace() {
		return this.stackTrace;
	}
	public set StackTrace(newValue: string) {
		if (this.stackTrace != newValue) {
			this.stackTrace = newValue;
			this.MarkAsDirty('StackTrace');
		}
	}

	private tenantName: string;
	public get TenantName() {
		return this.tenantName;
	}
	public set TenantName(newValue: string) {
		if (this.tenantName != newValue) {
			this.tenantName = newValue;
			this.MarkAsDirty('TenantName');
		}
	}

	private aWBNumber: string;
	public get AWBNumber() {
		return this.aWBNumber;
	}
	public set AWBNumber(newValue: string) {
		if (this.aWBNumber != newValue) {
			this.aWBNumber = newValue;
			this.MarkAsDirty('AWBNumber');
		}
	}

	private ackReason: string;
	public get AckReason() {
		return this.ackReason;
	}
	public set AckReason(newValue: string) {
		if (this.ackReason != newValue) {
			this.ackReason = newValue;
			this.MarkAsDirty('AckReason');
		}
	}

	private doneDate: Date;
	public get DoneDate() {
		return this.doneDate;
	}
	public set DoneDate(newValue: Date) {
		if (this.doneDate != newValue) {
			this.doneDate = newValue;
			this.MarkAsDirty('DoneDate');
		}
	}

	private analyzeQueueStatus: string;
	public get AnalyzeQueueStatus() {
		return this.analyzeQueueStatus;
	}
	public set AnalyzeQueueStatus(newValue: string) {
		if (this.analyzeQueueStatus != newValue) {
			this.analyzeQueueStatus = newValue;
			this.MarkAsDirty('AnalyzeQueueStatus');
		}
	}

	private tenantManagement: string;
	public get TenantManagement() {
		return this.tenantManagement;
	}
	public set TenantManagement(newValue: string) {
		if (this.tenantManagement != newValue) {
			this.tenantManagement = newValue;
			this.MarkAsDirty('TenantManagement');
		}
	}

	public OldEntityPM: AnalyzeQueuePM;

	public IsDirty: boolean;
	MarkAsDirty(propertyName: string = null) {
		this.IsDirty = true;

		if (propertyName != null) {
			ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'AnalyzeQueue');
		}
	}
	private MyClone: AnalyzeQueuePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
