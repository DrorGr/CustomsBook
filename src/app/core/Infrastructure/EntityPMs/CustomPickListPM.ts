//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';

export class CustomPickListPM {
	//
	constructor() {
		//
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private code: string;
	public get Code() {
		return this.code;
	}
	public set Code(newValue: string) {
		if (this.code != newValue) {
			this.code = newValue;
			this.MarkAsDirty('Code');
		}
	}

	private value: string;
	public get Value() {
		return this.value;
	}
	public set Value(newValue: string) {
		if (this.value != newValue) {
			this.value = newValue;
			this.MarkAsDirty('Value');
		}
	}

	private isMultipleChoice: boolean;
	public get IsMultipleChoice() {
		return this.isMultipleChoice;
	}
	public set IsMultipleChoice(newValue: boolean) {
		if (this.isMultipleChoice != newValue) {
			this.isMultipleChoice = newValue;
			this.MarkAsDirty('IsMultipleChoice');
		}
	}

	public OldEntityPM: CustomPickListPM;

	public IsDirty: boolean;
	MarkAsDirty(propertyName: string = null) {
		this.IsDirty = true;

		if (propertyName != null) {
			ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'CustomPickList');
		}
	}
	private MyClone: CustomPickListPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
