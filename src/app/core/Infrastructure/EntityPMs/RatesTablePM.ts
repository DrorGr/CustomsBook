//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class RatesTablePM {
	//
	constructor() {
		//
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private foreignCurrencyId: string;
	public get ForeignCurrencyId() {
		return this.foreignCurrencyId;
	}
	public set ForeignCurrencyId(newValue: string) {
		if (this.foreignCurrencyId != newValue) {
			this.foreignCurrencyId = newValue;
			this.MarkAsDirty('ForeignCurrencyId');
		}
	}

	private foreignCurrencyCode: string;
	public get ForeignCurrencyCode() {
		return this.foreignCurrencyCode;
	}
	public set ForeignCurrencyCode(newValue: string) {
		if (this.foreignCurrencyCode != newValue) {
			this.foreignCurrencyCode = newValue;
			this.MarkAsDirty('ForeignCurrencyCode');
		}
	}

	private foreignCurrencyName: string;
	public get ForeignCurrencyName() {
		return this.foreignCurrencyName;
	}
	public set ForeignCurrencyName(newValue: string) {
		if (this.foreignCurrencyName != newValue) {
			this.foreignCurrencyName = newValue;
			this.MarkAsDirty('ForeignCurrencyName');
		}
	}

	private baseCurrencyId: string;
	public get BaseCurrencyId() {
		return this.baseCurrencyId;
	}
	public set BaseCurrencyId(newValue: string) {
		if (this.baseCurrencyId != newValue) {
			this.baseCurrencyId = newValue;
			this.MarkAsDirty('BaseCurrencyId');
		}
	}

	private logDateTime: Date;
	public get LogDateTime() {
		return this.logDateTime;
	}
	public set LogDateTime(newValue: Date) {
		if (this.logDateTime != newValue) {
			this.logDateTime = newValue;
			this.MarkAsDirty('LogDateTime');
		}
	}

	private rate: number;
	public get Rate() {
		return this.rate;
	}
	public set Rate(newValue: number) {
		if (this.rate != newValue) {
			this.rate = newValue;
			this.MarkAsDirty('Rate');
		}
	}

	private valueDate: Date;
	public get ValueDate() {
		return this.valueDate;
	}
	public set ValueDate(newValue: Date) {
		if (this.valueDate != newValue) {
			this.valueDate = newValue;
			this.MarkAsDirty('ValueDate');
		}
	}

	public OldEntityPM: RatesTablePM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'RatesTable');
			}
		}
	}
	private MyClone: RatesTablePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
