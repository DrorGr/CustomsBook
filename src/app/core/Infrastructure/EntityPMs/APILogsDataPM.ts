//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class APILogsDataPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private diagnosticLog: string;
	public get DiagnosticLog() {
		return this.diagnosticLog;
	}
	public set DiagnosticLog(newValue: string) {
		if (this.diagnosticLog != newValue) {
			this.diagnosticLog = newValue;
			this.MarkAsDirty('DiagnosticLog');
		}
	}

	private requestData: string;
	public get RequestData() {
		return this.requestData;
	}
	public set RequestData(newValue: string) {
		if (this.requestData != newValue) {
			this.requestData = newValue;
			this.MarkAsDirty('RequestData');
		}
	}

	private responseData: string;
	public get ResponseData() {
		return this.responseData;
	}
	public set ResponseData(newValue: string) {
		if (this.responseData != newValue) {
			this.responseData = newValue;
			this.MarkAsDirty('ResponseData');
		}
	}

	private exceptionsMessage: string;
	public get ExceptionsMessage() {
		return this.exceptionsMessage;
	}
	public set ExceptionsMessage(newValue: string) {
		if (this.exceptionsMessage != newValue) {
			this.exceptionsMessage = newValue;
			this.MarkAsDirty('ExceptionsMessage');
		}
	}

	public OldEntityPM: APILogsDataPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'APILogsData');
			}
		}
	}
	private MyClone: APILogsDataPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
