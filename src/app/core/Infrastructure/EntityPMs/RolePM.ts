//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//
import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class RolePM {
	//
	// //
	//   constructor() {
	//     //
	//       this.IsDirty = false;
	//   }

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private code: string;
	public get Code() {
		return this.code;
	}
	public set Code(newValue: string) {
		if (this.code != newValue) {
			this.code = newValue;
			this.MarkAsDirty('Code');
		}
	}

	private name: string;
	public get Name() {
		return this.name;
	}
	public set Name(newValue: string) {
		if (this.name != newValue) {
			this.name = newValue;
			this.MarkAsDirty('Name');
		}
	}

	private roleTypeCode: string;
	public get RoleTypeCode() {
		return this.roleTypeCode;
	}
	public set RoleTypeCode(newValue: string) {
		if (this.roleTypeCode != newValue) {
			this.roleTypeCode = newValue;
			this.MarkAsDirty('RoleTypeCode');
		}
	}

	private description: string;
	public get Description() {
		return this.description;
	}
	public set Description(newValue: string) {
		if (this.description != newValue) {
			this.description = newValue;
			this.MarkAsDirty('Description');
		}
	}

	private parentRoleId: string;
	public get ParentRoleId() {
		return this.parentRoleId;
	}
	public set ParentRoleId(newValue: string) {
		if (this.parentRoleId != newValue) {
			this.parentRoleId = newValue;
			this.MarkAsDirty('ParentRoleId');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private isCustomRole: boolean;
	public get IsCustomRole() {
		return this.isCustomRole;
	}
	public set IsCustomRole(newValue: boolean) {
		if (this.isCustomRole != newValue) {
			this.isCustomRole = newValue;
			this.MarkAsDirty('IsCustomRole');
		}
	}

	private exists: boolean;
	public get Exists() {
		return this.exists;
	}
	public set Exists(newValue: boolean) {
		if (this.exists != newValue) {
			this.exists = newValue;
			this.MarkAsDirty('Exists');
		}
	}

	private added: boolean;
	public get Added() {
		return this.added;
	}
	public set Added(newValue: boolean) {
		if (this.added != newValue) {
			this.added = newValue;
			this.MarkAsDirty('Added');
		}
	}

	private removed: boolean;
	public get Removed() {
		return this.removed;
	}
	public set Removed(newValue: boolean) {
		if (this.removed != newValue) {
			this.removed = newValue;
			this.MarkAsDirty('Removed');
		}
	}

	private userId: string;
	public get UserId() {
		return this.userId;
	}
	public set UserId(newValue: string) {
		if (this.userId != newValue) {
			this.userId = newValue;
			this.MarkAsDirty('UserId');
		}
	}

	private currentTenant: number;
	public get CurrentTenant() {
		return this.currentTenant;
	}
	public set CurrentTenant(newValue: number) {
		if (this.currentTenant != newValue) {
			this.currentTenant = newValue;
			this.MarkAsDirty('CurrentTenant');
		}
	}

	public OldEntityPM: RolePM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				// this.PropertyChanged.emit(new PropertyChangedArgs(propertyName,this));
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'Role');
			}
		}
	}
	private MyClone: RolePM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
