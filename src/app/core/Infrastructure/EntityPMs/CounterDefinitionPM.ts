//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class CounterDefinitionPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private parameter1: string;
	public get Parameter1() {
		return this.parameter1;
	}
	public set Parameter1(newValue: string) {
		if (this.parameter1 != newValue) {
			this.parameter1 = newValue;
			this.MarkAsDirty('Parameter1');
		}
	}

	private parameter2: string;
	public get Parameter2() {
		return this.parameter2;
	}
	public set Parameter2(newValue: string) {
		if (this.parameter2 != newValue) {
			this.parameter2 = newValue;
			this.MarkAsDirty('Parameter2');
		}
	}

	private prefix: string;
	public get Prefix() {
		return this.prefix;
	}
	public set Prefix(newValue: string) {
		if (this.prefix != newValue) {
			this.prefix = newValue;
			this.MarkAsDirty('Prefix');
		}
	}

	private uniquePerPrefix: boolean;
	public get UniquePerPrefix() {
		return this.uniquePerPrefix;
	}
	public set UniquePerPrefix(newValue: boolean) {
		if (this.uniquePerPrefix != newValue) {
			this.uniquePerPrefix = newValue;
			this.MarkAsDirty('UniquePerPrefix');
		}
	}

	private counterId: string;
	public get CounterId() {
		return this.counterId;
	}
	public set CounterId(newValue: string) {
		if (this.counterId != newValue) {
			this.counterId = newValue;
			this.MarkAsDirty('CounterId');
		}
	}

	private startNumber: number;
	public get StartNumber() {
		return this.startNumber;
	}
	public set StartNumber(newValue: number) {
		if (this.startNumber != newValue) {
			this.startNumber = newValue;
			this.MarkAsDirty('StartNumber');
		}
	}

	private startNumber_Old: number;
	public get StartNumber_Old() {
		return this.startNumber_Old;
	}
	public set StartNumber_Old(newValue: number) {
		if (this.startNumber_Old != newValue) {
			this.startNumber_Old = newValue;
			this.MarkAsDirty('StartNumber_Old');
		}
	}

	private isUsed: boolean;
	public get IsUsed() {
		return this.isUsed;
	}
	public set IsUsed(newValue: boolean) {
		if (this.isUsed != newValue) {
			this.isUsed = newValue;
			this.MarkAsDirty('IsUsed');
		}
	}

	private counterSize: number;
	public get CounterSize() {
		return this.counterSize;
	}
	public set CounterSize(newValue: number) {
		if (this.counterSize != newValue) {
			this.counterSize = newValue;
			this.MarkAsDirty('CounterSize');
		}
	}

	private suffix: string;
	public get Suffix() {
		return this.suffix;
	}
	public set Suffix(newValue: string) {
		if (this.suffix != newValue) {
			this.suffix = newValue;
			this.MarkAsDirty('Suffix');
		}
	}

	public OldEntityPM: CounterDefinitionPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'CounterDefinition');
			}
		}
	}
	private MyClone: CounterDefinitionPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
