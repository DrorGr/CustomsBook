//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

import { ServiceHelper } from '../../Infrastructure/Utilities/ServiceHelper';
import { ServiceLocator } from '../../Infrastructure/Locators/ServiceLocator';
import { Output, EventEmitter } from '@angular/core';
import { PropertyChangedArgs } from '../../Infrastructure/EventEmitterArgs/PropertyChangedArgs';
import { CustomFieldClass } from '../../Infrastructure/DataContracts/CustomFieldClass';

export class TenantManagmentPrivateLabelsPM {
	constructor() {
		this.IsDirty = false;
	}

	private id: string;
	public get Id() {
		return this.id;
	}
	public set Id(newValue: string) {
		if (this.id != newValue) {
			this.id = newValue;
			this.MarkAsDirty('Id');
		}
	}

	private privateLabelName: string;
	public get PrivateLabelName() {
		return this.privateLabelName;
	}
	public set PrivateLabelName(newValue: string) {
		if (this.privateLabelName != newValue) {
			this.privateLabelName = newValue;
			this.MarkAsDirty('PrivateLabelName');
		}
	}

	private privateLabelShortName: string;
	public get PrivateLabelShortName() {
		return this.privateLabelShortName;
	}
	public set PrivateLabelShortName(newValue: string) {
		if (this.privateLabelShortName != newValue) {
			this.privateLabelShortName = newValue;
			this.MarkAsDirty('PrivateLabelShortName');
		}
	}

	private privateLabelUrl: string;
	public get PrivateLabelUrl() {
		return this.privateLabelUrl;
	}
	public set PrivateLabelUrl(newValue: string) {
		if (this.privateLabelUrl != newValue) {
			this.privateLabelUrl = newValue;
			this.MarkAsDirty('PrivateLabelUrl');
		}
	}

	private privateLabelDomain: string;
	public get PrivateLabelDomain() {
		return this.privateLabelDomain;
	}
	public set PrivateLabelDomain(newValue: string) {
		if (this.privateLabelDomain != newValue) {
			this.privateLabelDomain = newValue;
			this.MarkAsDirty('PrivateLabelDomain');
		}
	}

	private mainLogo: string;
	public get MainLogo() {
		return this.mainLogo;
	}
	public set MainLogo(newValue: string) {
		if (this.mainLogo != newValue) {
			this.mainLogo = newValue;
			this.MarkAsDirty('MainLogo');
		}
	}

	private contactUsEmail: string;
	public get ContactUsEmail() {
		return this.contactUsEmail;
	}
	public set ContactUsEmail(newValue: string) {
		if (this.contactUsEmail != newValue) {
			this.contactUsEmail = newValue;
			this.MarkAsDirty('ContactUsEmail');
		}
	}

	private receiveAllStatuses: boolean;
	public get ReceiveAllStatuses() {
		return this.receiveAllStatuses;
	}
	public set ReceiveAllStatuses(newValue: boolean) {
		if (this.receiveAllStatuses != newValue) {
			this.receiveAllStatuses = newValue;
			this.MarkAsDirty('ReceiveAllStatuses');
		}
	}

	private hybridPartnerId: string;
	public get HybridPartnerId() {
		return this.hybridPartnerId;
	}
	public set HybridPartnerId(newValue: string) {
		if (this.hybridPartnerId != newValue) {
			this.hybridPartnerId = newValue;
			this.MarkAsDirty('HybridPartnerId');
		}
	}

	private inActive: boolean;
	public get InActive() {
		return this.inActive;
	}
	public set InActive(newValue: boolean) {
		if (this.inActive != newValue) {
			this.inActive = newValue;
			this.MarkAsDirty('InActive');
		}
	}

	private searchFields: string;
	public get SearchFields() {
		return this.searchFields;
	}
	public set SearchFields(newValue: string) {
		if (this.searchFields != newValue) {
			this.searchFields = newValue;
			this.MarkAsDirty('SearchFields');
		}
	}

	private smallLogo: string;
	public get SmallLogo() {
		return this.smallLogo;
	}
	public set SmallLogo(newValue: string) {
		if (this.smallLogo != newValue) {
			this.smallLogo = newValue;
			this.MarkAsDirty('SmallLogo');
		}
	}

	private tenant: number;
	public get Tenant() {
		return this.tenant;
	}
	public set Tenant(newValue: number) {
		if (this.tenant != newValue) {
			this.tenant = newValue;
			this.MarkAsDirty('Tenant');
		}
	}

	private backgroundImageId: string;
	public get BackgroundImageId() {
		return this.backgroundImageId;
	}
	public set BackgroundImageId(newValue: string) {
		if (this.backgroundImageId != newValue) {
			this.backgroundImageId = newValue;
			this.MarkAsDirty('BackgroundImageId');
		}
	}

	private loginImageId: string;
	public get LoginImageId() {
		return this.loginImageId;
	}
	public set LoginImageId(newValue: string) {
		if (this.loginImageId != newValue) {
			this.loginImageId = newValue;
			this.MarkAsDirty('LoginImageId');
		}
	}

	private mainColor: string;
	public get MainColor() {
		return this.mainColor;
	}
	public set MainColor(newValue: string) {
		if (this.mainColor != newValue) {
			this.mainColor = newValue;
			this.MarkAsDirty('MainColor');
		}
	}

	private loginProgressImageId: string;
	public get LoginProgressImageId() {
		return this.loginProgressImageId;
	}
	public set LoginProgressImageId(newValue: string) {
		if (this.loginProgressImageId != newValue) {
			this.loginProgressImageId = newValue;
			this.MarkAsDirty('LoginProgressImageId');
		}
	}

	private forgetPasswordImageId: string;
	public get ForgetPasswordImageId() {
		return this.forgetPasswordImageId;
	}
	public set ForgetPasswordImageId(newValue: string) {
		if (this.forgetPasswordImageId != newValue) {
			this.forgetPasswordImageId = newValue;
			this.MarkAsDirty('ForgetPasswordImageId');
		}
	}

	private secondaryColor: string;
	public get SecondaryColor() {
		return this.secondaryColor;
	}
	public set SecondaryColor(newValue: string) {
		if (this.secondaryColor != newValue) {
			this.secondaryColor = newValue;
			this.MarkAsDirty('SecondaryColor');
		}
	}

	private hasLogboxAccess: boolean;
	public get HasLogboxAccess() {
		return this.hasLogboxAccess;
	}
	public set HasLogboxAccess(newValue: boolean) {
		if (this.hasLogboxAccess != newValue) {
			this.hasLogboxAccess = newValue;
			this.MarkAsDirty('HasLogboxAccess');
		}
	}

	public OldEntityPM: TenantManagmentPrivateLabelsPM;

	public IsDirty: boolean;
	public DisableMarkAsDirty: boolean = false;
	MarkAsDirty(propertyName: string = null) {
		if (!this.DisableMarkAsDirty) {
			this.IsDirty = true;

			if (propertyName != null) {
				ServiceLocator.RulesValidator.ApplyEntityChangedRules(propertyName, this, 'TenantManagmentPrivateLabels');
			}
		}
	}
	private MyClone: TenantManagmentPrivateLabelsPM;

	public CloneMe() {
		ServiceHelper.CloneEntityPM(this);
	}

	public RejectChanges() {
		ServiceHelper.RejectEntityPMChanges(this);
	}
}
