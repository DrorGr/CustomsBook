//------------------------------------------------------------------------------
// <auto-generated>
//     Angular 9.1.1
//     This code was generated by a logitude.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { catchError, map } from 'rxjs/operators';
import { defer, of } from 'rxjs';
import {ServiceResponse} from '../../DataContracts/ServiceResponse';
import {ClassLevelValidator} from '../../Validators/ClassLevelValidator';
import {Guid} from '../../Utilities/Guid';
import {InfraSettings} from '../../Utilities/InfraSettings';
import {ServiceHelper} from '../../Utilities/ServiceHelper';
import {SessionInfo} from '../../Utilities/SessionInfo';
import {PerformanceLogger} from '../../Utilities/PerformanceLogger';
import {CustomFieldClass} from '../../DataContracts/CustomFieldClass'

import {TeamPM} from '../../EntityPMs/TeamPM';

import {LBPTeamMemberPM} from '../../EntityPMs/LBPTeamMemberPM';

import {TeamMemberBusinessRolePM} from '../../EntityPMs/TeamMemberBusinessRolePM';

@Injectable()

export class TeamPMService {
 private _http: HttpClient;
 private _apiUrl: string;
 constructor() {
        this._http = ServiceHelper.HttpClient;
        this._apiUrl = ServiceHelper.GetLogitudeURL() + 'api/teams';      
    }

	get(id: string) {       

		var callTime = new Date();		

		return defer(() => {
			return this._http.get(this._apiUrl + '/getsingle?' + 'id=' + id, ServiceHelper.GetHttpFullHeaders())
				.pipe(
					map((response: HttpResponse<any>) => {
						var pm = response.body;
				
						var entity: TeamPM;
						if (pm) {
							entity = this.MapJsonToEntityPM(pm);
						}

						var serviceResponse: ServiceResponse = new ServiceResponse();
						serviceResponse.Result = entity;
              
						var servertime = response.headers.get('ServerExecutionTime');
						PerformanceLogger.InsertPerformanceLog(callTime, new Date(), Number(servertime), "Team", "GetSinglePM", 'id=' + id);
				 
						return serviceResponse;

					}),
					
					catchError(ServiceHelper.HandleServiceError));
		});                    
	}

	insert(entityPM: TeamPM) {
 
		var callTime = new Date();  
		
		return defer(() => {

			var serviceResponse: ServiceResponse = new ServiceResponse();
			var validator: ClassLevelValidator = new ClassLevelValidator();                
			var errorsArray = validator.Validate("Team", entityPM);


			if (errorsArray.length == 0) {

				var mappedEntity: TeamPM = this.MapJsonToEntityPM(entityPM, false);
				
				return this._http.post(this._apiUrl, JSON.stringify(mappedEntity), ServiceHelper.GetHttpFullHeaders())
					.pipe(
						map((response: HttpResponse<any>) => {

							var pm = response.body;
							if (pm) {
								var mappedResult: TeamPM = this.MapJsonToEntityPM(pm, true, entityPM);
								serviceResponse.Result = mappedResult;
							}						

							var servertime = response.headers.get('ServerExecutionTime');
							PerformanceLogger.InsertPerformanceLog(callTime, new Date(), Number(servertime), "Team", "SaveChanges", "");                    
												                             
							return serviceResponse;
						}),

						catchError(ServiceHelper.HandleServiceError));
			}

			else {
				serviceResponse.HasError = true;
				serviceResponse.ErrorsArray = errorsArray;
				return of(serviceResponse);
			}
		});
	}

	update(entityPM: TeamPM) {

		var callTime = new Date();     
		
		return defer(() => {

			var serviceResponse: ServiceResponse = new ServiceResponse();
			var validator: ClassLevelValidator = new ClassLevelValidator();               
			var errorsArray = validator.Validate("Team", entityPM);


			if (errorsArray.length == 0) {

				var mappedEntity: TeamPM = this.MapJsonToEntityPM(entityPM, false);
				
				return this._http.put(this._apiUrl, JSON.stringify(mappedEntity), ServiceHelper.GetHttpFullHeaders())
					.pipe(
						map((response: HttpResponse<any>) => {
                 
							var pm = response.body;
							if (pm) {
								var mappedResult: TeamPM = this.MapJsonToEntityPM(pm, true, entityPM);
								serviceResponse.Result = mappedResult;
							}
							 
							var servertime = response.headers.get('ServerExecutionTime');
							PerformanceLogger.InsertPerformanceLog(callTime, new Date(), Number(servertime), "Team", "SaveChanges", "");                    
					                           
							return serviceResponse;
						}),

						catchError(ServiceHelper.HandleServiceError));
			}

			else {
				serviceResponse.HasError = true;
				serviceResponse.ErrorsArray = errorsArray;
				return of(serviceResponse);
			}
		});
	}

   

	  MapJsonToEntityPM(jsonPM: any, mapParent: boolean = true, entityPM: TeamPM = null) {

         
        if (!entityPM) {
            
            entityPM = new TeamPM();
			entityPM.DisableMarkAsDirty = true;
        }

		var customFields: Array<string> = [];
        for (var i = 1; i < 11; i++) {
            customFields.push("Field" + i);
        }
            var jsonPMKeys = Object.keys(jsonPM);

            for (var key in jsonPMKeys) {
			 if (jsonPMKeys[key] === "UIProperties" || jsonPMKeys[key] === "PropertyChanged") {

                continue;
            }
                var property = jsonPMKeys[key];
				
			  if(customFields.indexOf(property) > -1)
                {
                if (jsonPM[property]) {
                    var customFieldClass: CustomFieldClass = new CustomFieldClass(jsonPM[property].Value, jsonPM[property].FieldName, jsonPM[property].TableName);
                    entityPM[property] = customFieldClass;
                }
            }
            else {
                entityPM[property] = jsonPM[property];
            }
                 
            }
			
               this.MapMemberLines(entityPM, jsonPM, mapParent); // Call composition tables map methods
			 
            

		if (mapParent) {
                entityPM.OldEntityPM = this.clone(entityPM);
			   			   
            entityPM.OldEntityPM.MemberLines = [];
            for (var item in entityPM.MemberLines) {
            var myLBPTeamMemberPM = entityPM.MemberLines[item];
            var newLBPTeamMemberPM: LBPTeamMemberPM = this.clone(myLBPTeamMemberPM);
						
                newLBPTeamMemberPM.BusinessRolesList = [];
                for (var k in myLBPTeamMemberPM.BusinessRolesList) {
				    var myTeamMemberBusinessRolePM =myLBPTeamMemberPM.BusinessRolesList[k];
				    var newTeamMemberBusinessRolePM=this.clone(myLBPTeamMemberPM.BusinessRolesList[k]);
                    newLBPTeamMemberPM.BusinessRolesList.push(newTeamMemberBusinessRolePM);

					                 }
							 
            entityPM.OldEntityPM.MemberLines.push(newLBPTeamMemberPM);
            }
			   
		}
        else {

            entityPM.OldEntityPM = null;
        }
		entityPM.IsDirty = false;
	    entityPM.DisableMarkAsDirty = false;

        return entityPM;
    }

    MapMemberLines(entityPM: TeamPM, jsonPM: any, mapParent: boolean = true) {

        var oldMemberLines: LBPTeamMemberPM[] = [];
        if (entityPM.OldEntityPM && !mapParent) {
            oldMemberLines = entityPM.OldEntityPM.MemberLines;
        }

        entityPM.MemberLines = new Array<LBPTeamMemberPM>();
        for (var item in jsonPM.MemberLines) {
            var jItem = jsonPM.MemberLines[item];
            if (mapParent && (jItem.ChangeSetOp == "Delete" || jItem.ChangeSetOp == 3)) {
                continue;
            }
            var newLBPTeamMemberPM: LBPTeamMemberPM;
	  
            if (mapParent) {
                newLBPTeamMemberPM = new LBPTeamMemberPM(entityPM);
            }
            else
            {
                newLBPTeamMemberPM = new LBPTeamMemberPM(null);
            }
 			newLBPTeamMemberPM.DisableMarkAsDirty = true;
               
            var pmKeysArray = Object.keys(jItem);
            for (var pmKey in pmKeysArray) {
                if ((!mapParent && pmKeysArray[pmKey] === "entityParentPM" )|| pmKeysArray[pmKey] === "UIProperties" || pmKeysArray[pmKey] === "PropertyChanged") {
                    continue;
                }
                var pmProperty = pmKeysArray[pmKey];
                newLBPTeamMemberPM[pmProperty] = jItem[pmProperty];
            }
           
			 
            if (mapParent) {
                newLBPTeamMemberPM.UniqueKey = Guid.newGuid();
                newLBPTeamMemberPM.ChangeSetOp = "None";
                jItem.ChangeSetOp = "None";
                newLBPTeamMemberPM.OldEntityPM = this.clone(newLBPTeamMemberPM);
 

                this.MapBusinessRolesList(newLBPTeamMemberPM, jItem, mapParent);
                newLBPTeamMemberPM.OldEntityPM.BusinessRolesList = [];
                for (var k in newLBPTeamMemberPM.BusinessRolesList) {
                    //var clonedInside = this.clone(newLBPTeamMemberPM.BusinessRolesList[k]);
                    newLBPTeamMemberPM.OldEntityPM.BusinessRolesList.push(newLBPTeamMemberPM.BusinessRolesList[k].OldEntityPM); // clone old BusinessRolesList//
                }

				
            }
            else {
                if (newLBPTeamMemberPM.UniqueKey) {

                    if (jItem.IsDirty)
                        newLBPTeamMemberPM.ChangeSetOp = "Update";
                }
                else {
                        newLBPTeamMemberPM.ChangeSetOp = "Insert";
                }
 

                this.MapBusinessRolesList(newLBPTeamMemberPM, jItem, mapParent);
 
                newLBPTeamMemberPM.OldEntityPM = null;
                newLBPTeamMemberPM.EntityParentPM = null;
            }
			 newLBPTeamMemberPM.DisableMarkAsDirty = false;
			 newLBPTeamMemberPM.IsDirty = false;
            entityPM.MemberLines.push(newLBPTeamMemberPM);
        }
        if (oldMemberLines) {
            
            for (var itemKey in oldMemberLines) {
                if (entityPM.MemberLines.filter(p=> p.UniqueKey === oldMemberLines[itemKey].UniqueKey).length === 0) {
				
                    if (oldMemberLines[itemKey]) {
                        //oldMemberLines[itemKey].ChangeSetOp = "Delete";
                        //entityPM.MemberLines.push(oldMemberLines[itemKey]);
						var oldItemJson = oldMemberLines[itemKey];
                        var deletedPM: LBPTeamMemberPM = new LBPTeamMemberPM(null);
						deletedPM.DisableMarkAsDirty = true;
                        var pmKeys = Object.keys(oldItemJson);
                        for (var key in pmKeys) {

                            if ((!mapParent && pmKeys[key] === "entityParentPM") || pmKeys[key] === "UIProperties" || pmKeys[key] === "OldEntityPM" || pmKeys[key] === "PropertyChanged") {
                                continue;
                            }

                            var property = pmKeys[key];
                            deletedPM[property] = oldItemJson[property];
                        }

					    deletedPM.DisableMarkAsDirty = false;
                        deletedPM.IsDirty = false;
                        deletedPM.ChangeSetOp = "Delete";
                        
 

                        this.MapBusinessRolesList(deletedPM, oldItemJson, mapParent);
                        deletedPM.OldEntityPM = null;
                        entityPM.MemberLines.push(deletedPM);
                    }
                }
            }
        }
    }
    MapBusinessRolesList(entityPM: LBPTeamMemberPM, jsonPM: any, mapParent: boolean = true) {

        var oldBusinessRolesList: TeamMemberBusinessRolePM[] = [];
        if (entityPM.OldEntityPM && !mapParent) {
            oldBusinessRolesList = entityPM.OldEntityPM.BusinessRolesList;
        }

        entityPM.BusinessRolesList = new Array<TeamMemberBusinessRolePM>();
        for (var item in jsonPM.BusinessRolesList) {
            var jItem = jsonPM.BusinessRolesList[item];
            if (mapParent && (jItem.ChangeSetOp == "Delete" || jItem.ChangeSetOp == 3)) {
                continue;
            }
            var newTeamMemberBusinessRolePM: TeamMemberBusinessRolePM;
	  
            if (mapParent) {
                newTeamMemberBusinessRolePM = new TeamMemberBusinessRolePM(entityPM);
            }
            else
            {
                newTeamMemberBusinessRolePM = new TeamMemberBusinessRolePM(null);
            }
 			newTeamMemberBusinessRolePM.DisableMarkAsDirty = true;
               
            var pmKeysArray = Object.keys(jItem);
            for (var pmKey in pmKeysArray) {
                if ((!mapParent && pmKeysArray[pmKey] === "entityParentPM" )|| pmKeysArray[pmKey] === "UIProperties" || pmKeysArray[pmKey] === "PropertyChanged") {
                    continue;
                }
                var pmProperty = pmKeysArray[pmKey];
                newTeamMemberBusinessRolePM[pmProperty] = jItem[pmProperty];
            }
           
			 
            if (mapParent) {
                newTeamMemberBusinessRolePM.UniqueKey = Guid.newGuid();
                newTeamMemberBusinessRolePM.ChangeSetOp = "None";
                jItem.ChangeSetOp = "None";
                newTeamMemberBusinessRolePM.OldEntityPM = this.clone(newTeamMemberBusinessRolePM);

				
            }
            else {
                if (entityPM.ChangeSetOp === "Delete") {
                    newTeamMemberBusinessRolePM.ChangeSetOp = "Delete";
                }
                else {
                    if (newTeamMemberBusinessRolePM.UniqueKey) {

                    if (jItem.IsDirty)
                        newTeamMemberBusinessRolePM.ChangeSetOp = "Update";
                    }
                else {
                        newTeamMemberBusinessRolePM.ChangeSetOp = "Insert";
                    }
                }
 
                newTeamMemberBusinessRolePM.OldEntityPM = null;
                newTeamMemberBusinessRolePM.EntityParentPM = null;
            }
			 newTeamMemberBusinessRolePM.DisableMarkAsDirty = false;
			 newTeamMemberBusinessRolePM.IsDirty = false;
            entityPM.BusinessRolesList.push(newTeamMemberBusinessRolePM);
        }
        if (oldBusinessRolesList) {
            
            for (var itemKey in oldBusinessRolesList) {
                if (entityPM.BusinessRolesList.filter(p=> p.UniqueKey === oldBusinessRolesList[itemKey].UniqueKey).length === 0) {
				
                    if (oldBusinessRolesList[itemKey]) {
                        //oldBusinessRolesList[itemKey].ChangeSetOp = "Delete";
                        //entityPM.BusinessRolesList.push(oldBusinessRolesList[itemKey]);
						var oldItemJson = oldBusinessRolesList[itemKey];
                        var deletedPM: TeamMemberBusinessRolePM = new TeamMemberBusinessRolePM(null);
						deletedPM.DisableMarkAsDirty = true;
                        var pmKeys = Object.keys(oldItemJson);
                        for (var key in pmKeys) {

                            if ((!mapParent && pmKeys[key] === "entityParentPM") || pmKeys[key] === "UIProperties" || pmKeys[key] === "OldEntityPM" || pmKeys[key] === "PropertyChanged") {
                                continue;
                            }

                            var property = pmKeys[key];
                            deletedPM[property] = oldItemJson[property];
                        }

					    deletedPM.DisableMarkAsDirty = false;
                        deletedPM.IsDirty = false;
                        deletedPM.ChangeSetOp = "Delete";
                        
                        deletedPM.OldEntityPM = null;
                        entityPM.BusinessRolesList.push(deletedPM);
                    }
                }
            }
        }
    }
 

	  public clone(jsonPM: any) {
        var entityPM: any;
        entityPM = {};

        var jsonPMKeys = Object.keys(jsonPM);
        for (var key in jsonPMKeys) {
            
            if ((jsonPMKeys[key] === "entityParentPM") || jsonPMKeys[key] === "UIProperties" || jsonPMKeys[key] === "OldEntityPM" || jsonPMKeys[key] === "PropertyChanged") {
                continue;
            }

            var property = jsonPMKeys[key];
            entityPM[property] = jsonPM[property];

        }
        return entityPM;
    }

	  public GetNewEntityPM() {		 
		    var entityPM: TeamPM;
			entityPM = new TeamPM();
			entityPM.Tenant = InfraSettings.TenantPM.Id;
			return entityPM;
    }
		 

}
